
USART_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a70  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004c00  08004c00  00005c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf8  08004cf8  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004cf8  08004cf8  00005cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d00  08004d00  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d00  08004d00  00005d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d04  08004d04  00005d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004d08  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000068  08004d70  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004d70  000062a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc0c  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002169  00000000  00000000  00012ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00014e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000800  00000000  00000000  00015898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020bf6  00000000  00000000  00016098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ced8  00000000  00000000  00036c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0f9b  00000000  00000000  00043b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104b01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000316c  00000000  00000000  00104b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00107cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004be8 	.word	0x08004be8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004be8 	.word	0x08004be8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);


int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

  HAL_Init();
 80005c0:	f000 fb4b 	bl	8000c5a <HAL_Init>
  SystemClock_Config();
 80005c4:	f000 f81a 	bl	80005fc <SystemClock_Config>
  MX_GPIO_Init();
 80005c8:	f000 f894 	bl	80006f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f862 	bl	8000694 <MX_USART2_UART_Init>

  while (1)
  {
	  USART_StartReceive_IT();
 80005d0:	f000 fa66 	bl	8000aa0 <USART_StartReceive_IT>
 80005d4:	e7fc      	b.n	80005d0 <main+0x14>
	...

080005d8 <__io_putchar>:
  }

}

int __io_putchar(int ch)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005e0:	1d39      	adds	r1, r7, #4
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	2201      	movs	r2, #1
 80005e8:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <__io_putchar+0x20>)
 80005ea:	f002 f861 	bl	80026b0 <HAL_UART_Transmit>
    return ch;
 80005ee:	687b      	ldr	r3, [r7, #4]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000084 	.word	0x20000084

080005fc <SystemClock_Config>:

void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	@ 0x58
 8000600:	af00      	add	r7, sp, #0
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000602:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2244      	movs	r2, #68	@ 0x44
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f003 fd63 	bl	80040e4 <memset>

	  /* MSI is enabled after System reset, activate PLL with MSI as source */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800061e:	2310      	movs	r3, #16
 8000620:	603b      	str	r3, [r7, #0]
	  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000622:	2301      	movs	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
	  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000626:	2360      	movs	r3, #96	@ 0x60
 8000628:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000632:	2301      	movs	r3, #1
 8000634:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  RCC_OscInitStruct.PLL.PLLM = 1;
 8000636:	2301      	movs	r3, #1
 8000638:	633b      	str	r3, [r7, #48]	@ 0x30
	  RCC_OscInitStruct.PLL.PLLN = 40;
 800063a:	2328      	movs	r3, #40	@ 0x28
 800063c:	637b      	str	r3, [r7, #52]	@ 0x34
	  RCC_OscInitStruct.PLL.PLLR = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	643b      	str	r3, [r7, #64]	@ 0x40
	  RCC_OscInitStruct.PLL.PLLP = 7;
 8000642:	2307      	movs	r3, #7
 8000644:	63bb      	str	r3, [r7, #56]	@ 0x38
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000646:	2304      	movs	r3, #4
 8000648:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	463b      	mov	r3, r7
 800064c:	4618      	mov	r0, r3
 800064e:	f000 feb1 	bl	80013b4 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x60>
	  {
	    /* Initialization Error */
	    while(1);
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <SystemClock_Config+0x5c>
	  }

	  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	     clocks dividers */
	  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800065c:	230f      	movs	r3, #15
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2303      	movs	r3, #3
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	653b      	str	r3, [r7, #80]	@ 0x50
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	657b      	str	r3, [r7, #84]	@ 0x54
	  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000670:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000674:	2104      	movs	r1, #4
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fab0 	bl	8001bdc <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x8a>
	  {
	    /* Initialization Error */
	    while(1);
 8000682:	bf00      	nop
 8000684:	e7fd      	b.n	8000682 <SystemClock_Config+0x86>
	  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000686:	f001 fec3 	bl	8002410 <HAL_RCCEx_EnableMSIPLLMode>
}
 800068a:	bf00      	nop
 800068c:	3758      	adds	r7, #88	@ 0x58
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000698:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <MX_USART2_UART_Init+0x58>)
 800069a:	4a15      	ldr	r2, [pc, #84]	@ (80006f0 <MX_USART2_UART_Init+0x5c>)
 800069c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069e:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <MX_USART2_UART_Init+0x58>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_USART2_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_USART2_UART_Init+0x58>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_USART2_UART_Init+0x58>)
 80006d8:	f001 ff9c 	bl	8002614 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006e2:	f000 f851 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000084 	.word	0x20000084
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <MX_GPIO_Init+0x8c>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	4a1c      	ldr	r2, [pc, #112]	@ (8000780 <MX_GPIO_Init+0x8c>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_GPIO_Init+0x8c>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <MX_GPIO_Init+0x8c>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <MX_GPIO_Init+0x8c>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_GPIO_Init+0x8c>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_GPIO_Init+0x8c>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a10      	ldr	r2, [pc, #64]	@ (8000780 <MX_GPIO_Init+0x8c>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_GPIO_Init+0x8c>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2108      	movs	r1, #8
 8000756:	480b      	ldr	r0, [pc, #44]	@ (8000784 <MX_GPIO_Init+0x90>)
 8000758:	f000 fe06 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800075c:	2308      	movs	r3, #8
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_GPIO_Init+0x90>)
 8000774:	f000 fc76 	bl	8001064 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000
 8000784:	48000400 	.word	0x48000400

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <Error_Handler+0x8>

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <HAL_MspInit+0x44>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800079e:	4a0e      	ldr	r2, [pc, #56]	@ (80007d8 <HAL_MspInit+0x44>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <HAL_MspInit+0x44>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <HAL_MspInit+0x44>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b6:	4a08      	ldr	r2, [pc, #32]	@ (80007d8 <HAL_MspInit+0x44>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <HAL_MspInit+0x44>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09e      	sub	sp, #120	@ 0x78
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	2254      	movs	r2, #84	@ 0x54
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 fc71 	bl	80040e4 <memset>
  if(huart->Instance==USART2)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a2c      	ldr	r2, [pc, #176]	@ (80008b8 <HAL_UART_MspInit+0xdc>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d150      	bne.n	80008ae <HAL_UART_MspInit+0xd2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800080c:	2302      	movs	r3, #2
 800080e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000810:	2300      	movs	r3, #0
 8000812:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fc03 	bl	8002024 <HAL_RCCEx_PeriphCLKConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000824:	f7ff ffb0 	bl	8000788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000828:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <HAL_UART_MspInit+0xe0>)
 800082a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082c:	4a23      	ldr	r2, [pc, #140]	@ (80008bc <HAL_UART_MspInit+0xe0>)
 800082e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000832:	6593      	str	r3, [r2, #88]	@ 0x58
 8000834:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <HAL_UART_MspInit+0xe0>)
 8000836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <HAL_UART_MspInit+0xe0>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000844:	4a1d      	ldr	r2, [pc, #116]	@ (80008bc <HAL_UART_MspInit+0xe0>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <HAL_UART_MspInit+0xe0>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000858:	2304      	movs	r3, #4
 800085a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000868:	2307      	movs	r3, #7
 800086a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000876:	f000 fbf5 	bl	8001064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800087a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800087e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800088c:	2303      	movs	r3, #3
 800088e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000894:	4619      	mov	r1, r3
 8000896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089a:	f000 fbe3 	bl	8001064 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2026      	movs	r0, #38	@ 0x26
 80008a4:	f000 fb29 	bl	8000efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008a8:	2026      	movs	r0, #38	@ 0x26
 80008aa:	f000 fb42 	bl	8000f32 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008ae:	bf00      	nop
 80008b0:	3778      	adds	r7, #120	@ 0x78
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40004400 	.word	0x40004400
 80008bc:	40021000 	.word	0x40021000

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <NMI_Handler+0x4>

080008c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <MemManage_Handler+0x4>

080008d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000916:	f000 f9f5 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <USART2_IRQHandler+0x10>)
 8000926:	f001 ff99 	bl	800285c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000084 	.word	0x20000084

08000934 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	e00a      	b.n	800095c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000946:	f3af 8000 	nop.w
 800094a:	4601      	mov	r1, r0
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	60ba      	str	r2, [r7, #8]
 8000952:	b2ca      	uxtb	r2, r1
 8000954:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	dbf0      	blt.n	8000946 <_read+0x12>
  }

  return len;
 8000964:	687b      	ldr	r3, [r7, #4]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b086      	sub	sp, #24
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	e009      	b.n	8000994 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	60ba      	str	r2, [r7, #8]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fe25 	bl	80005d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbf1      	blt.n	8000980 <_write+0x12>
  }
  return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_close>:

int _close(int file)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ce:	605a      	str	r2, [r3, #4]
  return 0;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <_isatty>:

int _isatty(int file)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a18:	4a14      	ldr	r2, [pc, #80]	@ (8000a6c <_sbrk+0x5c>)
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <_sbrk+0x60>)
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <_sbrk+0x64>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	@ (8000a78 <_sbrk+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d207      	bcs.n	8000a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a40:	f003 fb9e 	bl	8004180 <__errno>
 8000a44:	4603      	mov	r3, r0
 8000a46:	220c      	movs	r2, #12
 8000a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	e009      	b.n	8000a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a56:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <_sbrk+0x64>)
 8000a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a62:	68fb      	ldr	r3, [r7, #12]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2000c000 	.word	0x2000c000
 8000a70:	00000400 	.word	0x00000400
 8000a74:	2000010c 	.word	0x2000010c
 8000a78:	200002a8 	.word	0x200002a8

08000a7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <USART_StartReceive_IT>:
static uint8_t rxChar;
static uint8_t rxIndex = 0;

extern UART_HandleTypeDef huart2;

void USART_StartReceive_IT(){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &rxChar, 1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4903      	ldr	r1, [pc, #12]	@ (8000ab4 <USART_StartReceive_IT+0x14>)
 8000aa8:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <USART_StartReceive_IT+0x18>)
 8000aaa:	f001 fe8b 	bl	80027c4 <HAL_UART_Receive_IT>
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000150 	.word	0x20000150
 8000ab8:	20000084 	.word	0x20000084

08000abc <USART_ProcessChar>:

void USART_ProcessChar(uint8_t c){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	if(c == '\n' || c == '\r'){
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b0a      	cmp	r3, #10
 8000aca:	d002      	beq.n	8000ad2 <USART_ProcessChar+0x16>
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b0d      	cmp	r3, #13
 8000ad0:	d10d      	bne.n	8000aee <USART_ProcessChar+0x32>
		rxBuffer[rxIndex] = 0;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <USART_ProcessChar+0x58>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <USART_ProcessChar+0x5c>)
 8000ada:	2100      	movs	r1, #0
 8000adc:	5499      	strb	r1, [r3, r2]
		USART_ProcessCommand(rxBuffer);
 8000ade:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <USART_ProcessChar+0x5c>)
 8000ae0:	f000 f81c 	bl	8000b1c <USART_ProcessCommand>
		rxIndex = 0;
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <USART_ProcessChar+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
	if(c == '\n' || c == '\r'){
 8000aea:	bf00      	nop
	}
	else if(rxIndex < CMD_BUFFER_SIZE - 1){
		rxBuffer[rxIndex++] = c;
	}
}
 8000aec:	e00d      	b.n	8000b0a <USART_ProcessChar+0x4e>
	else if(rxIndex < CMD_BUFFER_SIZE - 1){
 8000aee:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <USART_ProcessChar+0x58>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b3e      	cmp	r3, #62	@ 0x3e
 8000af4:	d809      	bhi.n	8000b0a <USART_ProcessChar+0x4e>
		rxBuffer[rxIndex++] = c;
 8000af6:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <USART_ProcessChar+0x58>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	b2d1      	uxtb	r1, r2
 8000afe:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <USART_ProcessChar+0x58>)
 8000b00:	7011      	strb	r1, [r2, #0]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <USART_ProcessChar+0x5c>)
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	5453      	strb	r3, [r2, r1]
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000151 	.word	0x20000151
 8000b18:	20000110 	.word	0x20000110

08000b1c <USART_ProcessCommand>:

void USART_ProcessCommand(const char* cmd){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	if(strcmp(cmd, "LED ON") == 0){
 8000b24:	491f      	ldr	r1, [pc, #124]	@ (8000ba4 <USART_ProcessCommand+0x88>)
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fb52 	bl	80001d0 <strcmp>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d108      	bne.n	8000b44 <USART_ProcessCommand+0x28>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2108      	movs	r1, #8
 8000b36:	481c      	ldr	r0, [pc, #112]	@ (8000ba8 <USART_ProcessCommand+0x8c>)
 8000b38:	f000 fc16 	bl	8001368 <HAL_GPIO_WritePin>
		printf("LED turned ON\r\n");
 8000b3c:	481b      	ldr	r0, [pc, #108]	@ (8000bac <USART_ProcessCommand+0x90>)
 8000b3e:	f003 f9f1 	bl	8003f24 <puts>
		printf("LED is %s\r\n", (state == GPIO_PIN_SET) ? "ON" : "OFF");
	}
	else {
		printf("Unknown command. Try: LED ON, LED OFF, STATUS\r\n");
	}
}
 8000b42:	e02a      	b.n	8000b9a <USART_ProcessCommand+0x7e>
	else if(strcmp(cmd, "LED OFF") == 0){
 8000b44:	491a      	ldr	r1, [pc, #104]	@ (8000bb0 <USART_ProcessCommand+0x94>)
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff fb42 	bl	80001d0 <strcmp>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d108      	bne.n	8000b64 <USART_ProcessCommand+0x48>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2108      	movs	r1, #8
 8000b56:	4814      	ldr	r0, [pc, #80]	@ (8000ba8 <USART_ProcessCommand+0x8c>)
 8000b58:	f000 fc06 	bl	8001368 <HAL_GPIO_WritePin>
		printf("LED turned OFF\r\n");
 8000b5c:	4815      	ldr	r0, [pc, #84]	@ (8000bb4 <USART_ProcessCommand+0x98>)
 8000b5e:	f003 f9e1 	bl	8003f24 <puts>
}
 8000b62:	e01a      	b.n	8000b9a <USART_ProcessCommand+0x7e>
	else if(strcmp(cmd, "STATUS") == 0){
 8000b64:	4914      	ldr	r1, [pc, #80]	@ (8000bb8 <USART_ProcessCommand+0x9c>)
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff fb32 	bl	80001d0 <strcmp>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d110      	bne.n	8000b94 <USART_ProcessCommand+0x78>
		GPIO_PinState state = HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 8000b72:	2108      	movs	r1, #8
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <USART_ProcessCommand+0x8c>)
 8000b76:	f000 fbdf 	bl	8001338 <HAL_GPIO_ReadPin>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	73fb      	strb	r3, [r7, #15]
		printf("LED is %s\r\n", (state == GPIO_PIN_SET) ? "ON" : "OFF");
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d101      	bne.n	8000b88 <USART_ProcessCommand+0x6c>
 8000b84:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <USART_ProcessCommand+0xa0>)
 8000b86:	e000      	b.n	8000b8a <USART_ProcessCommand+0x6e>
 8000b88:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <USART_ProcessCommand+0xa4>)
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <USART_ProcessCommand+0xa8>)
 8000b8e:	f003 f961 	bl	8003e54 <iprintf>
}
 8000b92:	e002      	b.n	8000b9a <USART_ProcessCommand+0x7e>
		printf("Unknown command. Try: LED ON, LED OFF, STATUS\r\n");
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <USART_ProcessCommand+0xac>)
 8000b96:	f003 f9c5 	bl	8003f24 <puts>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	08004c00 	.word	0x08004c00
 8000ba8:	48000400 	.word	0x48000400
 8000bac:	08004c08 	.word	0x08004c08
 8000bb0:	08004c18 	.word	0x08004c18
 8000bb4:	08004c20 	.word	0x08004c20
 8000bb8:	08004c30 	.word	0x08004c30
 8000bbc:	08004c38 	.word	0x08004c38
 8000bc0:	08004c3c 	.word	0x08004c3c
 8000bc4:	08004c40 	.word	0x08004c40
 8000bc8:	08004c4c 	.word	0x08004c4c

08000bcc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_UART_RxCpltCallback+0x30>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d109      	bne.n	8000bf2 <HAL_UART_RxCpltCallback+0x26>
		USART_ProcessChar(rxChar);
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <HAL_UART_RxCpltCallback+0x34>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff6a 	bl	8000abc <USART_ProcessChar>
		HAL_UART_Receive_IT(&huart2, &rxChar, 1);
 8000be8:	2201      	movs	r2, #1
 8000bea:	4905      	ldr	r1, [pc, #20]	@ (8000c00 <HAL_UART_RxCpltCallback+0x34>)
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <HAL_UART_RxCpltCallback+0x38>)
 8000bee:	f001 fde9 	bl	80027c4 <HAL_UART_Receive_IT>
	}
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40004400 	.word	0x40004400
 8000c00:	20000150 	.word	0x20000150
 8000c04:	20000084 	.word	0x20000084

08000c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c0c:	f7ff ff36 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <LoopForever+0xe>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <LoopForever+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f003 faa9 	bl	800418c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3a:	f7ff fcbf 	bl	80005bc <main>

08000c3e <LoopForever>:

LoopForever:
    b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c40:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c4c:	08004d08 	.word	0x08004d08
  ldr r2, =_sbss
 8000c50:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c54:	200002a4 	.word	0x200002a4

08000c58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_IRQHandler>

08000c5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f93d 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 f80e 	bl	8000c8c <HAL_InitTick>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	e001      	b.n	8000c80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c7c:	f7ff fd8a 	bl	8000794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_InitTick+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d023      	beq.n	8000ce8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ca0:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <HAL_InitTick+0x70>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_InitTick+0x6c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f949 	bl	8000f4e <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10f      	bne.n	8000ce2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d809      	bhi.n	8000cdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f000 f913 	bl	8000efa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <HAL_InitTick+0x74>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e007      	b.n	8000cec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e004      	b.n	8000cec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e001      	b.n	8000cec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000154 	.word	0x20000154

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000154 	.word	0x20000154

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	@ (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	@ (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	@ (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	@ 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	@ 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff29 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0c:	f7ff ff3e 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff ff8e 	bl	8000e38 <NVIC_EncodePriority>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5d 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff31 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffa2 	bl	8000ea0 <SysTick_Config>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b085      	sub	sp, #20
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d008      	beq.n	8000f90 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2204      	movs	r2, #4
 8000f82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e022      	b.n	8000fd6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 020e 	bic.w	r2, r2, #14
 8000f9e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0201 	bic.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb4:	f003 021c 	and.w	r2, r3, #28
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d005      	beq.n	8001006 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e029      	b.n	800105a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 020e 	bic.w	r2, r2, #14
 8001014:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	f003 021c 	and.w	r2, r3, #28
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	2101      	movs	r1, #1
 8001034:	fa01 f202 	lsl.w	r2, r1, r2
 8001038:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	4798      	blx	r3
    }
  }
  return status;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001072:	e148      	b.n	8001306 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	2101      	movs	r1, #1
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	4013      	ands	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 813a 	beq.w	8001300 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d005      	beq.n	80010a4 <HAL_GPIO_Init+0x40>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d130      	bne.n	8001106 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010da:	2201      	movs	r2, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	091b      	lsrs	r3, r3, #4
 80010f0:	f003 0201 	and.w	r2, r3, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b03      	cmp	r3, #3
 8001110:	d017      	beq.n	8001142 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d123      	bne.n	8001196 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	08da      	lsrs	r2, r3, #3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3208      	adds	r2, #8
 8001156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	691a      	ldr	r2, [r3, #16]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	08da      	lsrs	r2, r3, #3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3208      	adds	r2, #8
 8001190:	6939      	ldr	r1, [r7, #16]
 8001192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0203 	and.w	r2, r3, #3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 8094 	beq.w	8001300 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d8:	4b52      	ldr	r3, [pc, #328]	@ (8001324 <HAL_GPIO_Init+0x2c0>)
 80011da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011dc:	4a51      	ldr	r2, [pc, #324]	@ (8001324 <HAL_GPIO_Init+0x2c0>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80011e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001324 <HAL_GPIO_Init+0x2c0>)
 80011e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001328 <HAL_GPIO_Init+0x2c4>)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800121a:	d00d      	beq.n	8001238 <HAL_GPIO_Init+0x1d4>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a43      	ldr	r2, [pc, #268]	@ (800132c <HAL_GPIO_Init+0x2c8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d007      	beq.n	8001234 <HAL_GPIO_Init+0x1d0>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a42      	ldr	r2, [pc, #264]	@ (8001330 <HAL_GPIO_Init+0x2cc>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d101      	bne.n	8001230 <HAL_GPIO_Init+0x1cc>
 800122c:	2302      	movs	r3, #2
 800122e:	e004      	b.n	800123a <HAL_GPIO_Init+0x1d6>
 8001230:	2307      	movs	r3, #7
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0x1d6>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_GPIO_Init+0x1d6>
 8001238:	2300      	movs	r3, #0
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	f002 0203 	and.w	r2, r2, #3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4093      	lsls	r3, r2
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800124a:	4937      	ldr	r1, [pc, #220]	@ (8001328 <HAL_GPIO_Init+0x2c4>)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001258:	4b36      	ldr	r3, [pc, #216]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800127c:	4a2d      	ldr	r2, [pc, #180]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001282:	4b2c      	ldr	r3, [pc, #176]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012a6:	4a23      	ldr	r2, [pc, #140]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ac:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012d0:	4a18      	ldr	r2, [pc, #96]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012d6:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	f47f aeaf 	bne.w	8001074 <HAL_GPIO_Init+0x10>
  }
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000
 8001328:	40010000 	.word	0x40010000
 800132c:	48000400 	.word	0x48000400
 8001330:	48000800 	.word	0x48000800
 8001334:	40010400 	.word	0x40010400

08001338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	4013      	ands	r3, r2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e001      	b.n	800135a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800135a:	7bfb      	ldrb	r3, [r7, #15]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001384:	e002      	b.n	800138c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40007000 	.word	0x40007000

080013b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f000 bc02 	b.w	8001bcc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c8:	4b96      	ldr	r3, [pc, #600]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d2:	4b94      	ldr	r3, [pc, #592]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80e4 	beq.w	80015b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d007      	beq.n	8001400 <HAL_RCC_OscConfig+0x4c>
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	f040 808b 	bne.w	800150e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	f040 8087 	bne.w	800150e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001400:	4b88      	ldr	r3, [pc, #544]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_OscConfig+0x64>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e3d9      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1a      	ldr	r2, [r3, #32]
 800141c:	4b81      	ldr	r3, [pc, #516]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d004      	beq.n	8001432 <HAL_RCC_OscConfig+0x7e>
 8001428:	4b7e      	ldr	r3, [pc, #504]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001430:	e005      	b.n	800143e <HAL_RCC_OscConfig+0x8a>
 8001432:	4b7c      	ldr	r3, [pc, #496]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800143e:	4293      	cmp	r3, r2
 8001440:	d223      	bcs.n	800148a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fd8c 	bl	8001f64 <RCC_SetFlashLatencyFromMSIRange>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e3ba      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001456:	4b73      	ldr	r3, [pc, #460]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a72      	ldr	r2, [pc, #456]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b70      	ldr	r3, [pc, #448]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	496d      	ldr	r1, [pc, #436]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001474:	4b6b      	ldr	r3, [pc, #428]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	4968      	ldr	r1, [pc, #416]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
 8001488:	e025      	b.n	80014d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148a:	4b66      	ldr	r3, [pc, #408]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a65      	ldr	r2, [pc, #404]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b63      	ldr	r3, [pc, #396]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	4960      	ldr	r1, [pc, #384]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	495b      	ldr	r1, [pc, #364]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fd4c 	bl	8001f64 <RCC_SetFlashLatencyFromMSIRange>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e37a      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014d6:	f000 fc81 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 80014da:	4602      	mov	r2, r0
 80014dc:	4b51      	ldr	r3, [pc, #324]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	4950      	ldr	r1, [pc, #320]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 80014e8:	5ccb      	ldrb	r3, [r1, r3]
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	fa22 f303 	lsr.w	r3, r2, r3
 80014f2:	4a4e      	ldr	r2, [pc, #312]	@ (800162c <HAL_RCC_OscConfig+0x278>)
 80014f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001630 <HAL_RCC_OscConfig+0x27c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fbc6 	bl	8000c8c <HAL_InitTick>
 8001500:	4603      	mov	r3, r0
 8001502:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d052      	beq.n	80015b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	e35e      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d032      	beq.n	800157c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001516:	4b43      	ldr	r3, [pc, #268]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a42      	ldr	r2, [pc, #264]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001522:	f7ff fc03 	bl	8000d2c <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800152a:	f7ff fbff 	bl	8000d2c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e347      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800153c:	4b39      	ldr	r3, [pc, #228]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001548:	4b36      	ldr	r3, [pc, #216]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a35      	ldr	r2, [pc, #212]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4930      	ldr	r1, [pc, #192]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001566:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	492b      	ldr	r1, [pc, #172]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
 800157a:	e01a      	b.n	80015b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800157c:	4b29      	ldr	r3, [pc, #164]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a28      	ldr	r2, [pc, #160]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001588:	f7ff fbd0 	bl	8000d2c <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001590:	f7ff fbcc 	bl	8000d2c <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e314      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015a2:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1dc>
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d073      	beq.n	80016a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_OscConfig+0x21c>
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2b0c      	cmp	r3, #12
 80015c8:	d10e      	bne.n	80015e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d10b      	bne.n	80015e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d063      	beq.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d15f      	bne.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e2f1      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f0:	d106      	bne.n	8001600 <HAL_RCC_OscConfig+0x24c>
 80015f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e025      	b.n	800164c <HAL_RCC_OscConfig+0x298>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001608:	d114      	bne.n	8001634 <HAL_RCC_OscConfig+0x280>
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a05      	ldr	r2, [pc, #20]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a02      	ldr	r2, [pc, #8]	@ (8001624 <HAL_RCC_OscConfig+0x270>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e013      	b.n	800164c <HAL_RCC_OscConfig+0x298>
 8001624:	40021000 	.word	0x40021000
 8001628:	08004c7c 	.word	0x08004c7c
 800162c:	20000000 	.word	0x20000000
 8001630:	20000004 	.word	0x20000004
 8001634:	4ba0      	ldr	r3, [pc, #640]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a9f      	ldr	r2, [pc, #636]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 800163a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b9d      	ldr	r3, [pc, #628]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a9c      	ldr	r2, [pc, #624]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001646:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800164a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff fb6a 	bl	8000d2c <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fb66 	bl	8000d2c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	@ 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e2ae      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166e:	4b92      	ldr	r3, [pc, #584]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x2a8>
 800167a:	e014      	b.n	80016a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fb56 	bl	8000d2c <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fb52 	bl	8000d2c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	@ 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e29a      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001696:	4b88      	ldr	r3, [pc, #544]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x2d0>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d060      	beq.n	8001774 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_OscConfig+0x310>
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	d119      	bne.n	80016f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d116      	bne.n	80016f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c4:	4b7c      	ldr	r3, [pc, #496]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_OscConfig+0x328>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e277      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016dc:	4b76      	ldr	r3, [pc, #472]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	4973      	ldr	r1, [pc, #460]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f0:	e040      	b.n	8001774 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d023      	beq.n	8001742 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fa:	4b6f      	ldr	r3, [pc, #444]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a6e      	ldr	r2, [pc, #440]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001706:	f7ff fb11 	bl	8000d2c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170e:	f7ff fb0d 	bl	8000d2c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e255      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001720:	4b65      	ldr	r3, [pc, #404]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b62      	ldr	r3, [pc, #392]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	495f      	ldr	r1, [pc, #380]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
 8001740:	e018      	b.n	8001774 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001742:	4b5d      	ldr	r3, [pc, #372]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a5c      	ldr	r2, [pc, #368]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800174c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff faed 	bl	8000d2c <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff fae9 	bl	8000d2c <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e231      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001768:	4b53      	ldr	r3, [pc, #332]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d03c      	beq.n	80017fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01c      	beq.n	80017c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001788:	4b4b      	ldr	r3, [pc, #300]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 800178a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800178e:	4a4a      	ldr	r2, [pc, #296]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff fac8 	bl	8000d2c <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff fac4 	bl	8000d2c <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e20c      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b2:	4b41      	ldr	r3, [pc, #260]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0ef      	beq.n	80017a0 <HAL_RCC_OscConfig+0x3ec>
 80017c0:	e01b      	b.n	80017fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c2:	4b3d      	ldr	r3, [pc, #244]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c8:	4a3b      	ldr	r2, [pc, #236]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d2:	f7ff faab 	bl	8000d2c <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017da:	f7ff faa7 	bl	8000d2c <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e1ef      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ec:	4b32      	ldr	r3, [pc, #200]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ef      	bne.n	80017da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 80a6 	beq.w	8001954 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800180c:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10d      	bne.n	8001834 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001818:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181c:	4a26      	ldr	r2, [pc, #152]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 800181e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001822:	6593      	str	r3, [r2, #88]	@ 0x58
 8001824:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001830:	2301      	movs	r3, #1
 8001832:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001834:	4b21      	ldr	r3, [pc, #132]	@ (80018bc <HAL_RCC_OscConfig+0x508>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d118      	bne.n	8001872 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001840:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <HAL_RCC_OscConfig+0x508>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1d      	ldr	r2, [pc, #116]	@ (80018bc <HAL_RCC_OscConfig+0x508>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184c:	f7ff fa6e 	bl	8000d2c <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001854:	f7ff fa6a 	bl	8000d2c <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e1b2      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <HAL_RCC_OscConfig+0x508>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <HAL_RCC_OscConfig+0x4d8>
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 800187c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001880:	4a0d      	ldr	r2, [pc, #52]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800188a:	e029      	b.n	80018e0 <HAL_RCC_OscConfig+0x52c>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b05      	cmp	r3, #5
 8001892:	d115      	bne.n	80018c0 <HAL_RCC_OscConfig+0x50c>
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800189a:	4a07      	ldr	r2, [pc, #28]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018aa:	4a03      	ldr	r2, [pc, #12]	@ (80018b8 <HAL_RCC_OscConfig+0x504>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018b4:	e014      	b.n	80018e0 <HAL_RCC_OscConfig+0x52c>
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40007000 	.word	0x40007000
 80018c0:	4b9a      	ldr	r3, [pc, #616]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c6:	4a99      	ldr	r2, [pc, #612]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018d0:	4b96      	ldr	r3, [pc, #600]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d6:	4a95      	ldr	r2, [pc, #596]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 80018d8:	f023 0304 	bic.w	r3, r3, #4
 80018dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d016      	beq.n	8001916 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff fa20 	bl	8000d2c <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7ff fa1c 	bl	8000d2c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e162      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001906:	4b89      	ldr	r3, [pc, #548]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0ed      	beq.n	80018f0 <HAL_RCC_OscConfig+0x53c>
 8001914:	e015      	b.n	8001942 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7ff fa09 	bl	8000d2c <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff fa05 	bl	8000d2c <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e14b      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001934:	4b7d      	ldr	r3, [pc, #500]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1ed      	bne.n	800191e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001942:	7ffb      	ldrb	r3, [r7, #31]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001948:	4b78      	ldr	r3, [pc, #480]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194c:	4a77      	ldr	r2, [pc, #476]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 800194e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001952:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0320 	and.w	r3, r3, #32
 800195c:	2b00      	cmp	r3, #0
 800195e:	d03c      	beq.n	80019da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001964:	2b00      	cmp	r3, #0
 8001966:	d01c      	beq.n	80019a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001968:	4b70      	ldr	r3, [pc, #448]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 800196a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800196e:	4a6f      	ldr	r2, [pc, #444]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7ff f9d8 	bl	8000d2c <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001980:	f7ff f9d4 	bl	8000d2c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e11c      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001992:	4b66      	ldr	r3, [pc, #408]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001994:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0ef      	beq.n	8001980 <HAL_RCC_OscConfig+0x5cc>
 80019a0:	e01b      	b.n	80019da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019a2:	4b62      	ldr	r3, [pc, #392]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 80019a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019a8:	4a60      	ldr	r2, [pc, #384]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b2:	f7ff f9bb 	bl	8000d2c <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ba:	f7ff f9b7 	bl	8000d2c <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e0ff      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019cc:	4b57      	ldr	r3, [pc, #348]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 80019ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1ef      	bne.n	80019ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80f3 	beq.w	8001bca <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	f040 80c9 	bne.w	8001b80 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019ee:	4b4f      	ldr	r3, [pc, #316]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 0203 	and.w	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d12c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d123      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d11b      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d113      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	3b01      	subs	r3, #1
 8001a42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d109      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	085b      	lsrs	r3, r3, #1
 8001a54:	3b01      	subs	r3, #1
 8001a56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d06b      	beq.n	8001b34 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	d062      	beq.n	8001b28 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a62:	4b32      	ldr	r3, [pc, #200]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0ac      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a72:	4b2e      	ldr	r3, [pc, #184]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a2d      	ldr	r2, [pc, #180]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001a78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a7e:	f7ff f955 	bl	8000d2c <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a86:	f7ff f951 	bl	8000d2c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e099      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a98:	4b24      	ldr	r3, [pc, #144]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa4:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <HAL_RCC_OscConfig+0x77c>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ab4:	3a01      	subs	r2, #1
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001abe:	0212      	lsls	r2, r2, #8
 8001ac0:	4311      	orrs	r1, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ac6:	0852      	lsrs	r2, r2, #1
 8001ac8:	3a01      	subs	r2, #1
 8001aca:	0552      	lsls	r2, r2, #21
 8001acc:	4311      	orrs	r1, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ad2:	0852      	lsrs	r2, r2, #1
 8001ad4:	3a01      	subs	r2, #1
 8001ad6:	0652      	lsls	r2, r2, #25
 8001ad8:	4311      	orrs	r1, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ade:	06d2      	lsls	r2, r2, #27
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	4912      	ldr	r1, [pc, #72]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ae8:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0f      	ldr	r2, [pc, #60]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001af2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001af4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4a0c      	ldr	r2, [pc, #48]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001afa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001afe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b00:	f7ff f914 	bl	8000d2c <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff f910 	bl	8000d2c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e058      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1a:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <HAL_RCC_OscConfig+0x778>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b26:	e050      	b.n	8001bca <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e04f      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b34:	4b27      	ldr	r3, [pc, #156]	@ (8001bd4 <HAL_RCC_OscConfig+0x820>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d144      	bne.n	8001bca <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b40:	4b24      	ldr	r3, [pc, #144]	@ (8001bd4 <HAL_RCC_OscConfig+0x820>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a23      	ldr	r2, [pc, #140]	@ (8001bd4 <HAL_RCC_OscConfig+0x820>)
 8001b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b4c:	4b21      	ldr	r3, [pc, #132]	@ (8001bd4 <HAL_RCC_OscConfig+0x820>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4a20      	ldr	r2, [pc, #128]	@ (8001bd4 <HAL_RCC_OscConfig+0x820>)
 8001b52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b58:	f7ff f8e8 	bl	8000d2c <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff f8e4 	bl	8000d2c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e02c      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b72:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <HAL_RCC_OscConfig+0x820>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x7ac>
 8001b7e:	e024      	b.n	8001bca <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d01f      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <HAL_RCC_OscConfig+0x820>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a12      	ldr	r2, [pc, #72]	@ (8001bd4 <HAL_RCC_OscConfig+0x820>)
 8001b8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff f8cb 	bl	8000d2c <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7ff f8c7 	bl	8000d2c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e00f      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bac:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <HAL_RCC_OscConfig+0x820>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_RCC_OscConfig+0x820>)
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	4905      	ldr	r1, [pc, #20]	@ (8001bd4 <HAL_RCC_OscConfig+0x820>)
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_RCC_OscConfig+0x824>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60cb      	str	r3, [r1, #12]
 8001bc4:	e001      	b.n	8001bca <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	feeefffc 	.word	0xfeeefffc

08001bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0e7      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b75      	ldr	r3, [pc, #468]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d910      	bls.n	8001c20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b72      	ldr	r3, [pc, #456]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 0207 	bic.w	r2, r3, #7
 8001c06:	4970      	ldr	r1, [pc, #448]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b6e      	ldr	r3, [pc, #440]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0cf      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d010      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	4b66      	ldr	r3, [pc, #408]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d908      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3c:	4b63      	ldr	r3, [pc, #396]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4960      	ldr	r1, [pc, #384]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d04c      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c62:	4b5a      	ldr	r3, [pc, #360]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d121      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0a6      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7a:	4b54      	ldr	r3, [pc, #336]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d115      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e09a      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c92:	4b4e      	ldr	r3, [pc, #312]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e08e      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e086      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb2:	4b46      	ldr	r3, [pc, #280]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f023 0203 	bic.w	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4943      	ldr	r1, [pc, #268]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc4:	f7ff f832 	bl	8000d2c <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ccc:	f7ff f82e 	bl	8000d2c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e06e      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 020c 	and.w	r2, r3, #12
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1eb      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d010      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	4b31      	ldr	r3, [pc, #196]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d208      	bcs.n	8001d22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b2e      	ldr	r3, [pc, #184]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	492b      	ldr	r1, [pc, #172]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d22:	4b29      	ldr	r3, [pc, #164]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d210      	bcs.n	8001d52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d30:	4b25      	ldr	r3, [pc, #148]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 0207 	bic.w	r2, r3, #7
 8001d38:	4923      	ldr	r1, [pc, #140]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d40:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e036      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d008      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	4918      	ldr	r1, [pc, #96]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d009      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4910      	ldr	r1, [pc, #64]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d90:	f000 f824 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d94:	4602      	mov	r2, r0
 8001d96:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	091b      	lsrs	r3, r3, #4
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	490b      	ldr	r1, [pc, #44]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001da2:	5ccb      	ldrb	r3, [r1, r3]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dac:	4a09      	ldr	r2, [pc, #36]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001db0:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1fc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe ff69 	bl	8000c8c <HAL_InitTick>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	08004c7c 	.word	0x08004c7c
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dea:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x34>
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d121      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d11e      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e10:	4b34      	ldr	r3, [pc, #208]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e1c:	4b31      	ldr	r3, [pc, #196]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	e005      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e38:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10d      	bne.n	8001e64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d102      	bne.n	8001e5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e54:	4b25      	ldr	r3, [pc, #148]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x110>)
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	e004      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e60:	4b23      	ldr	r3, [pc, #140]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d134      	bne.n	8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d003      	beq.n	8001e82 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d003      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0xac>
 8001e80:	e005      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e82:	4b1a      	ldr	r3, [pc, #104]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x110>)
 8001e84:	617b      	str	r3, [r7, #20]
      break;
 8001e86:	e005      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e88:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e8a:	617b      	str	r3, [r7, #20]
      break;
 8001e8c:	e002      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	617b      	str	r3, [r7, #20]
      break;
 8001e92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e94:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	fb03 f202 	mul.w	r2, r3, r2
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	0e5b      	lsrs	r3, r3, #25
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	@ 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08004c94 	.word	0x08004c94
 8001eec:	00f42400 	.word	0x00f42400
 8001ef0:	007a1200 	.word	0x007a1200

08001ef4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000000 	.word	0x20000000

08001f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f10:	f7ff fff0 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	4904      	ldr	r1, [pc, #16]	@ (8001f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	08004c8c 	.word	0x08004c8c

08001f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f3c:	f7ff ffda 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	0adb      	lsrs	r3, r3, #11
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4904      	ldr	r1, [pc, #16]	@ (8001f60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	08004c8c 	.word	0x08004c8c

08001f64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f70:	4b2a      	ldr	r3, [pc, #168]	@ (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f7c:	f7ff fa0c 	bl	8001398 <HAL_PWREx_GetVoltageRange>
 8001f80:	6178      	str	r0, [r7, #20]
 8001f82:	e014      	b.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f84:	4b25      	ldr	r3, [pc, #148]	@ (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	4a24      	ldr	r2, [pc, #144]	@ (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f90:	4b22      	ldr	r3, [pc, #136]	@ (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f9c:	f7ff f9fc 	bl	8001398 <HAL_PWREx_GetVoltageRange>
 8001fa0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fb4:	d10b      	bne.n	8001fce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b80      	cmp	r3, #128	@ 0x80
 8001fba:	d919      	bls.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fc0:	d902      	bls.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	e013      	b.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc8:	2301      	movs	r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	e010      	b.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b80      	cmp	r3, #128	@ 0x80
 8001fd2:	d902      	bls.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	e00a      	b.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b80      	cmp	r3, #128	@ 0x80
 8001fde:	d102      	bne.n	8001fe6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	e004      	b.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b70      	cmp	r3, #112	@ 0x70
 8001fea:	d101      	bne.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fec:	2301      	movs	r3, #1
 8001fee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 0207 	bic.w	r2, r3, #7
 8001ff8:	4909      	ldr	r1, [pc, #36]	@ (8002020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002000:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	429a      	cmp	r2, r3
 800200c:	d001      	beq.n	8002012 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	40022000 	.word	0x40022000

08002024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800202c:	2300      	movs	r3, #0
 800202e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002030:	2300      	movs	r3, #0
 8002032:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800203c:	2b00      	cmp	r3, #0
 800203e:	d031      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002044:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002048:	d01a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800204a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800204e:	d814      	bhi.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002054:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002058:	d10f      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800205a:	4b5d      	ldr	r3, [pc, #372]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	4a5c      	ldr	r2, [pc, #368]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002064:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002066:	e00c      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f9de 	bl	8002430 <RCCEx_PLLSAI1_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002078:	e003      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	74fb      	strb	r3, [r7, #19]
      break;
 800207e:	e000      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002082:	7cfb      	ldrb	r3, [r7, #19]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10b      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002088:	4b51      	ldr	r3, [pc, #324]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002096:	494e      	ldr	r1, [pc, #312]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800209e:	e001      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 809e 	beq.w	80021ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020b6:	4b46      	ldr	r3, [pc, #280]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80020c6:	2300      	movs	r3, #0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00d      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	4b40      	ldr	r3, [pc, #256]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	4a3f      	ldr	r2, [pc, #252]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d8:	4b3d      	ldr	r3, [pc, #244]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e4:	2301      	movs	r3, #1
 80020e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e8:	4b3a      	ldr	r3, [pc, #232]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a39      	ldr	r2, [pc, #228]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020f4:	f7fe fe1a 	bl	8000d2c <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020fa:	e009      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fc:	f7fe fe16 	bl	8000d2c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d902      	bls.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	74fb      	strb	r3, [r7, #19]
        break;
 800210e:	e005      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002110:	4b30      	ldr	r3, [pc, #192]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ef      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d15a      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002122:	4b2b      	ldr	r3, [pc, #172]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002128:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800212c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01e      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	429a      	cmp	r2, r3
 800213c:	d019      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800213e:	4b24      	ldr	r3, [pc, #144]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002148:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800214a:	4b21      	ldr	r3, [pc, #132]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002150:	4a1f      	ldr	r2, [pc, #124]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002156:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800215a:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002160:	4a1b      	ldr	r2, [pc, #108]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002166:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800216a:	4a19      	ldr	r2, [pc, #100]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d016      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe fdd6 	bl	8000d2c <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002182:	e00b      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7fe fdd2 	bl	8000d2c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d902      	bls.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	74fb      	strb	r3, [r7, #19]
            break;
 800219a:	e006      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ec      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80021aa:	7cfb      	ldrb	r3, [r7, #19]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10b      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021b0:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021be:	4904      	ldr	r1, [pc, #16]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021c6:	e009      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	74bb      	strb	r3, [r7, #18]
 80021cc:	e006      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d8:	7cfb      	ldrb	r3, [r7, #19]
 80021da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021dc:	7c7b      	ldrb	r3, [r7, #17]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d105      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e2:	4b8a      	ldr	r3, [pc, #552]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e6:	4a89      	ldr	r2, [pc, #548]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021fa:	4b84      	ldr	r3, [pc, #528]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002200:	f023 0203 	bic.w	r2, r3, #3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4980      	ldr	r1, [pc, #512]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800221c:	4b7b      	ldr	r3, [pc, #492]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002222:	f023 020c 	bic.w	r2, r3, #12
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	4978      	ldr	r1, [pc, #480]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800223e:	4b73      	ldr	r3, [pc, #460]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002244:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224c:	496f      	ldr	r1, [pc, #444]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002260:	4b6a      	ldr	r3, [pc, #424]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002266:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800226e:	4967      	ldr	r1, [pc, #412]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002282:	4b62      	ldr	r3, [pc, #392]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002288:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002290:	495e      	ldr	r1, [pc, #376]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022a4:	4b59      	ldr	r3, [pc, #356]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b2:	4956      	ldr	r1, [pc, #344]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022c6:	4b51      	ldr	r3, [pc, #324]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d4:	494d      	ldr	r1, [pc, #308]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d028      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022e8:	4b48      	ldr	r3, [pc, #288]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	4945      	ldr	r1, [pc, #276]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002306:	d106      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002308:	4b40      	ldr	r3, [pc, #256]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a3f      	ldr	r2, [pc, #252]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800230e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002312:	60d3      	str	r3, [r2, #12]
 8002314:	e011      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800231e:	d10c      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
 8002324:	2101      	movs	r1, #1
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f882 	bl	8002430 <RCCEx_PLLSAI1_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d028      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002346:	4b31      	ldr	r3, [pc, #196]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002354:	492d      	ldr	r1, [pc, #180]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002360:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002364:	d106      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002366:	4b29      	ldr	r3, [pc, #164]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4a28      	ldr	r2, [pc, #160]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800236c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002370:	60d3      	str	r3, [r2, #12]
 8002372:	e011      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002378:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800237c:	d10c      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3304      	adds	r3, #4
 8002382:	2101      	movs	r1, #1
 8002384:	4618      	mov	r0, r3
 8002386:	f000 f853 	bl	8002430 <RCCEx_PLLSAI1_Config>
 800238a:	4603      	mov	r3, r0
 800238c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01c      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023a4:	4b19      	ldr	r3, [pc, #100]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b2:	4916      	ldr	r1, [pc, #88]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023c2:	d10c      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3304      	adds	r3, #4
 80023c8:	2102      	movs	r1, #2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f830 	bl	8002430 <RCCEx_PLLSAI1_Config>
 80023d0:	4603      	mov	r3, r0
 80023d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023ea:	4b08      	ldr	r3, [pc, #32]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f8:	4904      	ldr	r1, [pc, #16]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002400:	7cbb      	ldrb	r3, [r7, #18]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000

08002410 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002414:	4b05      	ldr	r3, [pc, #20]	@ (800242c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a04      	ldr	r2, [pc, #16]	@ (800242c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800241a:	f043 0304 	orr.w	r3, r3, #4
 800241e:	6013      	str	r3, [r2, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000

08002430 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800243e:	4b74      	ldr	r3, [pc, #464]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d018      	beq.n	800247c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800244a:	4b71      	ldr	r3, [pc, #452]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0203 	and.w	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d10d      	bne.n	8002476 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
       ||
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002462:	4b6b      	ldr	r3, [pc, #428]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
       ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d047      	beq.n	8002506 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
 800247a:	e044      	b.n	8002506 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d018      	beq.n	80024b6 <RCCEx_PLLSAI1_Config+0x86>
 8002484:	2b03      	cmp	r3, #3
 8002486:	d825      	bhi.n	80024d4 <RCCEx_PLLSAI1_Config+0xa4>
 8002488:	2b01      	cmp	r3, #1
 800248a:	d002      	beq.n	8002492 <RCCEx_PLLSAI1_Config+0x62>
 800248c:	2b02      	cmp	r3, #2
 800248e:	d009      	beq.n	80024a4 <RCCEx_PLLSAI1_Config+0x74>
 8002490:	e020      	b.n	80024d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002492:	4b5f      	ldr	r3, [pc, #380]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d11d      	bne.n	80024da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a2:	e01a      	b.n	80024da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024a4:	4b5a      	ldr	r3, [pc, #360]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d116      	bne.n	80024de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b4:	e013      	b.n	80024de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024b6:	4b56      	ldr	r3, [pc, #344]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10f      	bne.n	80024e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024c2:	4b53      	ldr	r3, [pc, #332]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024d2:	e006      	b.n	80024e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
      break;
 80024d8:	e004      	b.n	80024e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024da:	bf00      	nop
 80024dc:	e002      	b.n	80024e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024de:	bf00      	nop
 80024e0:	e000      	b.n	80024e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10d      	bne.n	8002506 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024ea:	4b49      	ldr	r3, [pc, #292]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	430b      	orrs	r3, r1
 8002500:	4943      	ldr	r1, [pc, #268]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002502:	4313      	orrs	r3, r2
 8002504:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d17c      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800250c:	4b40      	ldr	r3, [pc, #256]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a3f      	ldr	r2, [pc, #252]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002512:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002518:	f7fe fc08 	bl	8000d2c <HAL_GetTick>
 800251c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800251e:	e009      	b.n	8002534 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002520:	f7fe fc04 	bl	8000d2c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d902      	bls.n	8002534 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	73fb      	strb	r3, [r7, #15]
        break;
 8002532:	e005      	b.n	8002540 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002534:	4b36      	ldr	r3, [pc, #216]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1ef      	bne.n	8002520 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d15f      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d110      	bne.n	800256e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800254c:	4b30      	ldr	r3, [pc, #192]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002554:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6892      	ldr	r2, [r2, #8]
 800255c:	0211      	lsls	r1, r2, #8
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68d2      	ldr	r2, [r2, #12]
 8002562:	06d2      	lsls	r2, r2, #27
 8002564:	430a      	orrs	r2, r1
 8002566:	492a      	ldr	r1, [pc, #168]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002568:	4313      	orrs	r3, r2
 800256a:	610b      	str	r3, [r1, #16]
 800256c:	e027      	b.n	80025be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d112      	bne.n	800259a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002574:	4b26      	ldr	r3, [pc, #152]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800257c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6892      	ldr	r2, [r2, #8]
 8002584:	0211      	lsls	r1, r2, #8
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6912      	ldr	r2, [r2, #16]
 800258a:	0852      	lsrs	r2, r2, #1
 800258c:	3a01      	subs	r2, #1
 800258e:	0552      	lsls	r2, r2, #21
 8002590:	430a      	orrs	r2, r1
 8002592:	491f      	ldr	r1, [pc, #124]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002594:	4313      	orrs	r3, r2
 8002596:	610b      	str	r3, [r1, #16]
 8002598:	e011      	b.n	80025be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800259a:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80025a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6892      	ldr	r2, [r2, #8]
 80025aa:	0211      	lsls	r1, r2, #8
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6952      	ldr	r2, [r2, #20]
 80025b0:	0852      	lsrs	r2, r2, #1
 80025b2:	3a01      	subs	r2, #1
 80025b4:	0652      	lsls	r2, r2, #25
 80025b6:	430a      	orrs	r2, r1
 80025b8:	4915      	ldr	r1, [pc, #84]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025be:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a13      	ldr	r2, [pc, #76]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7fe fbaf 	bl	8000d2c <HAL_GetTick>
 80025ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025d0:	e009      	b.n	80025e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025d2:	f7fe fbab 	bl	8000d2c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d902      	bls.n	80025e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	73fb      	strb	r3, [r7, #15]
          break;
 80025e4:	e005      	b.n	80025f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0ef      	beq.n	80025d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025f8:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4903      	ldr	r1, [pc, #12]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002602:	4313      	orrs	r3, r2
 8002604:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e040      	b.n	80026a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fe f8d0 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2224      	movs	r2, #36	@ 0x24
 8002640:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0201 	bic.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fe50 	bl	8003300 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fc21 	bl	8002ea8 <UART_SetConfig>
 8002666:	4603      	mov	r3, r0
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e01b      	b.n	80026a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800267e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800268e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fecf 	bl	8003444 <UART_CheckIdleState>
 80026a6:	4603      	mov	r3, r0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	@ 0x28
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	4613      	mov	r3, r2
 80026be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d177      	bne.n	80027b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <HAL_UART_Transmit+0x24>
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e070      	b.n	80027ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2221      	movs	r2, #33	@ 0x21
 80026e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026e6:	f7fe fb21 	bl	8000d2c <HAL_GetTick>
 80026ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	88fa      	ldrh	r2, [r7, #6]
 80026f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002704:	d108      	bne.n	8002718 <HAL_UART_Transmit+0x68>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	e003      	b.n	8002720 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002720:	e02f      	b.n	8002782 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2200      	movs	r2, #0
 800272a:	2180      	movs	r1, #128	@ 0x80
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 ff31 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e03b      	b.n	80027ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10b      	bne.n	8002760 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	881a      	ldrh	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002754:	b292      	uxth	r2, r2
 8002756:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	3302      	adds	r3, #2
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	e007      	b.n	8002770 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3301      	adds	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1c9      	bne.n	8002722 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2200      	movs	r2, #0
 8002796:	2140      	movs	r1, #64	@ 0x40
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fefb 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e005      	b.n	80027ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e000      	b.n	80027ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
  }
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3720      	adds	r7, #32
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	@ 0x28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d137      	bne.n	800284c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_UART_Receive_IT+0x24>
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e030      	b.n	800284e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a18      	ldr	r2, [pc, #96]	@ (8002858 <HAL_UART_Receive_IT+0x94>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d01f      	beq.n	800283c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d018      	beq.n	800283c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	e853 3f00 	ldrex	r3, [r3]
 8002816:	613b      	str	r3, [r7, #16]
   return(result);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	623b      	str	r3, [r7, #32]
 800282a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282c:	69f9      	ldr	r1, [r7, #28]
 800282e:	6a3a      	ldr	r2, [r7, #32]
 8002830:	e841 2300 	strex	r3, r2, [r1]
 8002834:	61bb      	str	r3, [r7, #24]
   return(result);
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1e6      	bne.n	800280a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	461a      	mov	r2, r3
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 ff14 	bl	8003670 <UART_Start_Receive_IT>
 8002848:	4603      	mov	r3, r0
 800284a:	e000      	b.n	800284e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800284c:	2302      	movs	r3, #2
  }
}
 800284e:	4618      	mov	r0, r3
 8002850:	3728      	adds	r7, #40	@ 0x28
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40008000 	.word	0x40008000

0800285c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b0ba      	sub	sp, #232	@ 0xe8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002882:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002886:	f640 030f 	movw	r3, #2063	@ 0x80f
 800288a:	4013      	ands	r3, r2
 800288c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002890:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d115      	bne.n	80028c4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00f      	beq.n	80028c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d009      	beq.n	80028c4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 82ca 	beq.w	8002e4e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
      }
      return;
 80028c2:	e2c4      	b.n	8002e4e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80028c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8117 	beq.w	8002afc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80028ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80028da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80028de:	4b85      	ldr	r3, [pc, #532]	@ (8002af4 <HAL_UART_IRQHandler+0x298>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 810a 	beq.w	8002afc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d011      	beq.n	8002918 <HAL_UART_IRQHandler+0xbc>
 80028f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2201      	movs	r2, #1
 8002906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800290e:	f043 0201 	orr.w	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d011      	beq.n	8002948 <HAL_UART_IRQHandler+0xec>
 8002924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00b      	beq.n	8002948 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2202      	movs	r2, #2
 8002936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800293e:	f043 0204 	orr.w	r2, r3, #4
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d011      	beq.n	8002978 <HAL_UART_IRQHandler+0x11c>
 8002954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2204      	movs	r2, #4
 8002966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800296e:	f043 0202 	orr.w	r2, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d017      	beq.n	80029b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002994:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2208      	movs	r2, #8
 80029a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029aa:	f043 0208 	orr.w	r2, r3, #8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d012      	beq.n	80029e6 <HAL_UART_IRQHandler+0x18a>
 80029c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00c      	beq.n	80029e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8230 	beq.w	8002e52 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2e:	2b40      	cmp	r3, #64	@ 0x40
 8002a30:	d005      	beq.n	8002a3e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d04f      	beq.n	8002ade <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fedc 	bl	80037fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4e:	2b40      	cmp	r3, #64	@ 0x40
 8002a50:	d141      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	3308      	adds	r3, #8
 8002a58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a60:	e853 3f00 	ldrex	r3, [r3]
 8002a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3308      	adds	r3, #8
 8002a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a8e:	e841 2300 	strex	r3, r2, [r1]
 8002a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1d9      	bne.n	8002a52 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d013      	beq.n	8002ace <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aaa:	4a13      	ldr	r2, [pc, #76]	@ (8002af8 <HAL_UART_IRQHandler+0x29c>)
 8002aac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fa95 	bl	8000fe2 <HAL_DMA_Abort_IT>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d017      	beq.n	8002aee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002acc:	e00f      	b.n	8002aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f9d4 	bl	8002e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad4:	e00b      	b.n	8002aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f9d0 	bl	8002e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002adc:	e007      	b.n	8002aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f9cc 	bl	8002e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002aec:	e1b1      	b.n	8002e52 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aee:	bf00      	nop
    return;
 8002af0:	e1af      	b.n	8002e52 <HAL_UART_IRQHandler+0x5f6>
 8002af2:	bf00      	nop
 8002af4:	04000120 	.word	0x04000120
 8002af8:	080038c5 	.word	0x080038c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	f040 816a 	bne.w	8002dda <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8163 	beq.w	8002dda <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 815c 	beq.w	8002dda <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2210      	movs	r2, #16
 8002b28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b34:	2b40      	cmp	r3, #64	@ 0x40
 8002b36:	f040 80d4 	bne.w	8002ce2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80ad 	beq.w	8002caa <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	f080 80a5 	bcs.w	8002caa <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 8086 	bne.w	8002c88 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ba6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002baa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002bb6:	e841 2300 	strex	r3, r2, [r1]
 8002bba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1da      	bne.n	8002b7c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3308      	adds	r3, #8
 8002bcc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002bd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3308      	adds	r3, #8
 8002be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002bf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002bf6:	e841 2300 	strex	r3, r2, [r1]
 8002bfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1e1      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3308      	adds	r3, #8
 8002c08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3308      	adds	r3, #8
 8002c22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e3      	bne.n	8002c02 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c58:	f023 0310 	bic.w	r3, r3, #16
 8002c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e4      	bne.n	8002c48 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe f96f 	bl	8000f66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8f4 	bl	8002e90 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002ca8:	e0d5      	b.n	8002e56 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002cb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	f040 80ce 	bne.w	8002e56 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	f040 80c5 	bne.w	8002e56 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002cd8:	4619      	mov	r1, r3
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f8d8 	bl	8002e90 <HAL_UARTEx_RxEventCallback>
      return;
 8002ce0:	e0b9      	b.n	8002e56 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80ab 	beq.w	8002e5a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8002d04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80a6 	beq.w	8002e5a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d16:	e853 3f00 	ldrex	r3, [r3]
 8002d1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d38:	e841 2300 	strex	r3, r2, [r1]
 8002d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e4      	bne.n	8002d0e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3308      	adds	r3, #8
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	623b      	str	r3, [r7, #32]
   return(result);
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3308      	adds	r3, #8
 8002d64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002d68:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d70:	e841 2300 	strex	r3, r2, [r1]
 8002d74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e3      	bne.n	8002d44 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f023 0310 	bic.w	r3, r3, #16
 8002da4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db6:	69b9      	ldr	r1, [r7, #24]
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	617b      	str	r3, [r7, #20]
   return(result);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e4      	bne.n	8002d90 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f85c 	bl	8002e90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dd8:	e03f      	b.n	8002e5a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00e      	beq.n	8002e04 <HAL_UART_IRQHandler+0x5a8>
 8002de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002dfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 ff5d 	bl	8003cbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e02:	e02d      	b.n	8002e60 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00e      	beq.n	8002e2e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01c      	beq.n	8002e5e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
    }
    return;
 8002e2c:	e017      	b.n	8002e5e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d012      	beq.n	8002e60 <HAL_UART_IRQHandler+0x604>
 8002e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fd52 	bl	80038f0 <UART_EndTransmit_IT>
    return;
 8002e4c:	e008      	b.n	8002e60 <HAL_UART_IRQHandler+0x604>
      return;
 8002e4e:	bf00      	nop
 8002e50:	e006      	b.n	8002e60 <HAL_UART_IRQHandler+0x604>
    return;
 8002e52:	bf00      	nop
 8002e54:	e004      	b.n	8002e60 <HAL_UART_IRQHandler+0x604>
      return;
 8002e56:	bf00      	nop
 8002e58:	e002      	b.n	8002e60 <HAL_UART_IRQHandler+0x604>
      return;
 8002e5a:	bf00      	nop
 8002e5c:	e000      	b.n	8002e60 <HAL_UART_IRQHandler+0x604>
    return;
 8002e5e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002e60:	37e8      	adds	r7, #232	@ 0xe8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop

08002e68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eac:	b08a      	sub	sp, #40	@ 0x28
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4bb4      	ldr	r3, [pc, #720]	@ (80031a8 <UART_SetConfig+0x300>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4aa9      	ldr	r2, [pc, #676]	@ (80031ac <UART_SetConfig+0x304>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d004      	beq.n	8002f14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f10:	4313      	orrs	r3, r2
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f24:	430a      	orrs	r2, r1
 8002f26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4aa0      	ldr	r2, [pc, #640]	@ (80031b0 <UART_SetConfig+0x308>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d126      	bne.n	8002f80 <UART_SetConfig+0xd8>
 8002f32:	4ba0      	ldr	r3, [pc, #640]	@ (80031b4 <UART_SetConfig+0x30c>)
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d81b      	bhi.n	8002f78 <UART_SetConfig+0xd0>
 8002f40:	a201      	add	r2, pc, #4	@ (adr r2, 8002f48 <UART_SetConfig+0xa0>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f59 	.word	0x08002f59
 8002f4c:	08002f69 	.word	0x08002f69
 8002f50:	08002f61 	.word	0x08002f61
 8002f54:	08002f71 	.word	0x08002f71
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f5e:	e080      	b.n	8003062 <UART_SetConfig+0x1ba>
 8002f60:	2302      	movs	r3, #2
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f66:	e07c      	b.n	8003062 <UART_SetConfig+0x1ba>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f6e:	e078      	b.n	8003062 <UART_SetConfig+0x1ba>
 8002f70:	2308      	movs	r3, #8
 8002f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f76:	e074      	b.n	8003062 <UART_SetConfig+0x1ba>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f7e:	e070      	b.n	8003062 <UART_SetConfig+0x1ba>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a8c      	ldr	r2, [pc, #560]	@ (80031b8 <UART_SetConfig+0x310>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d138      	bne.n	8002ffc <UART_SetConfig+0x154>
 8002f8a:	4b8a      	ldr	r3, [pc, #552]	@ (80031b4 <UART_SetConfig+0x30c>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b0c      	cmp	r3, #12
 8002f96:	d82d      	bhi.n	8002ff4 <UART_SetConfig+0x14c>
 8002f98:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa0 <UART_SetConfig+0xf8>)
 8002f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9e:	bf00      	nop
 8002fa0:	08002fd5 	.word	0x08002fd5
 8002fa4:	08002ff5 	.word	0x08002ff5
 8002fa8:	08002ff5 	.word	0x08002ff5
 8002fac:	08002ff5 	.word	0x08002ff5
 8002fb0:	08002fe5 	.word	0x08002fe5
 8002fb4:	08002ff5 	.word	0x08002ff5
 8002fb8:	08002ff5 	.word	0x08002ff5
 8002fbc:	08002ff5 	.word	0x08002ff5
 8002fc0:	08002fdd 	.word	0x08002fdd
 8002fc4:	08002ff5 	.word	0x08002ff5
 8002fc8:	08002ff5 	.word	0x08002ff5
 8002fcc:	08002ff5 	.word	0x08002ff5
 8002fd0:	08002fed 	.word	0x08002fed
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fda:	e042      	b.n	8003062 <UART_SetConfig+0x1ba>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fe2:	e03e      	b.n	8003062 <UART_SetConfig+0x1ba>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fea:	e03a      	b.n	8003062 <UART_SetConfig+0x1ba>
 8002fec:	2308      	movs	r3, #8
 8002fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ff2:	e036      	b.n	8003062 <UART_SetConfig+0x1ba>
 8002ff4:	2310      	movs	r3, #16
 8002ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ffa:	e032      	b.n	8003062 <UART_SetConfig+0x1ba>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a6a      	ldr	r2, [pc, #424]	@ (80031ac <UART_SetConfig+0x304>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d12a      	bne.n	800305c <UART_SetConfig+0x1b4>
 8003006:	4b6b      	ldr	r3, [pc, #428]	@ (80031b4 <UART_SetConfig+0x30c>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003010:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003014:	d01a      	beq.n	800304c <UART_SetConfig+0x1a4>
 8003016:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800301a:	d81b      	bhi.n	8003054 <UART_SetConfig+0x1ac>
 800301c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003020:	d00c      	beq.n	800303c <UART_SetConfig+0x194>
 8003022:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003026:	d815      	bhi.n	8003054 <UART_SetConfig+0x1ac>
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <UART_SetConfig+0x18c>
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003030:	d008      	beq.n	8003044 <UART_SetConfig+0x19c>
 8003032:	e00f      	b.n	8003054 <UART_SetConfig+0x1ac>
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800303a:	e012      	b.n	8003062 <UART_SetConfig+0x1ba>
 800303c:	2302      	movs	r3, #2
 800303e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003042:	e00e      	b.n	8003062 <UART_SetConfig+0x1ba>
 8003044:	2304      	movs	r3, #4
 8003046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800304a:	e00a      	b.n	8003062 <UART_SetConfig+0x1ba>
 800304c:	2308      	movs	r3, #8
 800304e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003052:	e006      	b.n	8003062 <UART_SetConfig+0x1ba>
 8003054:	2310      	movs	r3, #16
 8003056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800305a:	e002      	b.n	8003062 <UART_SetConfig+0x1ba>
 800305c:	2310      	movs	r3, #16
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a51      	ldr	r2, [pc, #324]	@ (80031ac <UART_SetConfig+0x304>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d17a      	bne.n	8003162 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800306c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003070:	2b08      	cmp	r3, #8
 8003072:	d824      	bhi.n	80030be <UART_SetConfig+0x216>
 8003074:	a201      	add	r2, pc, #4	@ (adr r2, 800307c <UART_SetConfig+0x1d4>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	080030a1 	.word	0x080030a1
 8003080:	080030bf 	.word	0x080030bf
 8003084:	080030a9 	.word	0x080030a9
 8003088:	080030bf 	.word	0x080030bf
 800308c:	080030af 	.word	0x080030af
 8003090:	080030bf 	.word	0x080030bf
 8003094:	080030bf 	.word	0x080030bf
 8003098:	080030bf 	.word	0x080030bf
 800309c:	080030b7 	.word	0x080030b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a0:	f7fe ff34 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 80030a4:	61f8      	str	r0, [r7, #28]
        break;
 80030a6:	e010      	b.n	80030ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a8:	4b44      	ldr	r3, [pc, #272]	@ (80031bc <UART_SetConfig+0x314>)
 80030aa:	61fb      	str	r3, [r7, #28]
        break;
 80030ac:	e00d      	b.n	80030ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ae:	f7fe fe95 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 80030b2:	61f8      	str	r0, [r7, #28]
        break;
 80030b4:	e009      	b.n	80030ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ba:	61fb      	str	r3, [r7, #28]
        break;
 80030bc:	e005      	b.n	80030ca <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8107 	beq.w	80032e0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d305      	bcc.n	80030ee <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d903      	bls.n	80030f6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030f4:	e0f4      	b.n	80032e0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	2200      	movs	r2, #0
 80030fa:	461c      	mov	r4, r3
 80030fc:	4615      	mov	r5, r2
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	022b      	lsls	r3, r5, #8
 8003108:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800310c:	0222      	lsls	r2, r4, #8
 800310e:	68f9      	ldr	r1, [r7, #12]
 8003110:	6849      	ldr	r1, [r1, #4]
 8003112:	0849      	lsrs	r1, r1, #1
 8003114:	2000      	movs	r0, #0
 8003116:	4688      	mov	r8, r1
 8003118:	4681      	mov	r9, r0
 800311a:	eb12 0a08 	adds.w	sl, r2, r8
 800311e:	eb43 0b09 	adc.w	fp, r3, r9
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003130:	4650      	mov	r0, sl
 8003132:	4659      	mov	r1, fp
 8003134:	f7fd f8ac 	bl	8000290 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4613      	mov	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003146:	d308      	bcc.n	800315a <UART_SetConfig+0x2b2>
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800314e:	d204      	bcs.n	800315a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	60da      	str	r2, [r3, #12]
 8003158:	e0c2      	b.n	80032e0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003160:	e0be      	b.n	80032e0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800316a:	d16a      	bne.n	8003242 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800316c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003170:	2b08      	cmp	r3, #8
 8003172:	d834      	bhi.n	80031de <UART_SetConfig+0x336>
 8003174:	a201      	add	r2, pc, #4	@ (adr r2, 800317c <UART_SetConfig+0x2d4>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	080031a1 	.word	0x080031a1
 8003180:	080031c1 	.word	0x080031c1
 8003184:	080031c9 	.word	0x080031c9
 8003188:	080031df 	.word	0x080031df
 800318c:	080031cf 	.word	0x080031cf
 8003190:	080031df 	.word	0x080031df
 8003194:	080031df 	.word	0x080031df
 8003198:	080031df 	.word	0x080031df
 800319c:	080031d7 	.word	0x080031d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a0:	f7fe feb4 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 80031a4:	61f8      	str	r0, [r7, #28]
        break;
 80031a6:	e020      	b.n	80031ea <UART_SetConfig+0x342>
 80031a8:	efff69f3 	.word	0xefff69f3
 80031ac:	40008000 	.word	0x40008000
 80031b0:	40013800 	.word	0x40013800
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40004400 	.word	0x40004400
 80031bc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031c0:	f7fe feba 	bl	8001f38 <HAL_RCC_GetPCLK2Freq>
 80031c4:	61f8      	str	r0, [r7, #28]
        break;
 80031c6:	e010      	b.n	80031ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c8:	4b4c      	ldr	r3, [pc, #304]	@ (80032fc <UART_SetConfig+0x454>)
 80031ca:	61fb      	str	r3, [r7, #28]
        break;
 80031cc:	e00d      	b.n	80031ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ce:	f7fe fe05 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 80031d2:	61f8      	str	r0, [r7, #28]
        break;
 80031d4:	e009      	b.n	80031ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031da:	61fb      	str	r3, [r7, #28]
        break;
 80031dc:	e005      	b.n	80031ea <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d077      	beq.n	80032e0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	005a      	lsls	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	085b      	lsrs	r3, r3, #1
 80031fa:	441a      	add	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	fbb2 f3f3 	udiv	r3, r2, r3
 8003204:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b0f      	cmp	r3, #15
 800320a:	d916      	bls.n	800323a <UART_SetConfig+0x392>
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003212:	d212      	bcs.n	800323a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	b29b      	uxth	r3, r3
 8003218:	f023 030f 	bic.w	r3, r3, #15
 800321c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	085b      	lsrs	r3, r3, #1
 8003222:	b29b      	uxth	r3, r3
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	b29a      	uxth	r2, r3
 800322a:	8afb      	ldrh	r3, [r7, #22]
 800322c:	4313      	orrs	r3, r2
 800322e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	8afa      	ldrh	r2, [r7, #22]
 8003236:	60da      	str	r2, [r3, #12]
 8003238:	e052      	b.n	80032e0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003240:	e04e      	b.n	80032e0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003242:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003246:	2b08      	cmp	r3, #8
 8003248:	d827      	bhi.n	800329a <UART_SetConfig+0x3f2>
 800324a:	a201      	add	r2, pc, #4	@ (adr r2, 8003250 <UART_SetConfig+0x3a8>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	08003275 	.word	0x08003275
 8003254:	0800327d 	.word	0x0800327d
 8003258:	08003285 	.word	0x08003285
 800325c:	0800329b 	.word	0x0800329b
 8003260:	0800328b 	.word	0x0800328b
 8003264:	0800329b 	.word	0x0800329b
 8003268:	0800329b 	.word	0x0800329b
 800326c:	0800329b 	.word	0x0800329b
 8003270:	08003293 	.word	0x08003293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003274:	f7fe fe4a 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 8003278:	61f8      	str	r0, [r7, #28]
        break;
 800327a:	e014      	b.n	80032a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800327c:	f7fe fe5c 	bl	8001f38 <HAL_RCC_GetPCLK2Freq>
 8003280:	61f8      	str	r0, [r7, #28]
        break;
 8003282:	e010      	b.n	80032a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003284:	4b1d      	ldr	r3, [pc, #116]	@ (80032fc <UART_SetConfig+0x454>)
 8003286:	61fb      	str	r3, [r7, #28]
        break;
 8003288:	e00d      	b.n	80032a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328a:	f7fe fda7 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 800328e:	61f8      	str	r0, [r7, #28]
        break;
 8003290:	e009      	b.n	80032a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003296:	61fb      	str	r3, [r7, #28]
        break;
 8003298:	e005      	b.n	80032a6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80032a4:	bf00      	nop
    }

    if (pclk != 0U)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d019      	beq.n	80032e0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	085a      	lsrs	r2, r3, #1
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	441a      	add	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b0f      	cmp	r3, #15
 80032c4:	d909      	bls.n	80032da <UART_SetConfig+0x432>
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032cc:	d205      	bcs.n	80032da <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60da      	str	r2, [r3, #12]
 80032d8:	e002      	b.n	80032e0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3728      	adds	r7, #40	@ 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032fa:	bf00      	nop
 80032fc:	00f42400 	.word	0x00f42400

08003300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01a      	beq.n	8003416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033fe:	d10a      	bne.n	8003416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  }
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b098      	sub	sp, #96	@ 0x60
 8003448:	af02      	add	r7, sp, #8
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003454:	f7fd fc6a 	bl	8000d2c <HAL_GetTick>
 8003458:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b08      	cmp	r3, #8
 8003466:	d12e      	bne.n	80034c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003468:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003470:	2200      	movs	r2, #0
 8003472:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f88c 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d021      	beq.n	80034c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003496:	653b      	str	r3, [r7, #80]	@ 0x50
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034a8:	e841 2300 	strex	r3, r2, [r1]
 80034ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e6      	bne.n	8003482 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e062      	b.n	800358c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d149      	bne.n	8003568 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034dc:	2200      	movs	r2, #0
 80034de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f856 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d03c      	beq.n	8003568 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	e853 3f00 	ldrex	r3, [r3]
 80034fa:	623b      	str	r3, [r7, #32]
   return(result);
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003502:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800350c:	633b      	str	r3, [r7, #48]	@ 0x30
 800350e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800351a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e6      	bne.n	80034ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3308      	adds	r3, #8
 8003526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0301 	bic.w	r3, r3, #1
 8003536:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3308      	adds	r3, #8
 800353e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003540:	61fa      	str	r2, [r7, #28]
 8003542:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	69b9      	ldr	r1, [r7, #24]
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	617b      	str	r3, [r7, #20]
   return(result);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e5      	bne.n	8003520 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e011      	b.n	800358c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3758      	adds	r7, #88	@ 0x58
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a4:	e04f      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d04b      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ae:	f7fd fbbd 	bl	8000d2c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d302      	bcc.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e04e      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d037      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b80      	cmp	r3, #128	@ 0x80
 80035da:	d034      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b40      	cmp	r3, #64	@ 0x40
 80035e0:	d031      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d110      	bne.n	8003612 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2208      	movs	r2, #8
 80035f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f8ff 	bl	80037fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2208      	movs	r2, #8
 8003602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e029      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800361c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003620:	d111      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800362a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f8e5 	bl	80037fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e00f      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	429a      	cmp	r2, r3
 8003662:	d0a0      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003670:	b480      	push	{r7}
 8003672:	b097      	sub	sp, #92	@ 0x5c
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	88fa      	ldrh	r2, [r7, #6]
 8003688:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a2:	d10e      	bne.n	80036c2 <UART_Start_Receive_IT+0x52>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <UART_Start_Receive_IT+0x48>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80036b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036b6:	e02d      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	22ff      	movs	r2, #255	@ 0xff
 80036bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036c0:	e028      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <UART_Start_Receive_IT+0x76>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d104      	bne.n	80036dc <UART_Start_Receive_IT+0x6c>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	22ff      	movs	r2, #255	@ 0xff
 80036d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036da:	e01b      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	227f      	movs	r2, #127	@ 0x7f
 80036e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036e4:	e016      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036ee:	d10d      	bne.n	800370c <UART_Start_Receive_IT+0x9c>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <UART_Start_Receive_IT+0x92>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	227f      	movs	r2, #127	@ 0x7f
 80036fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003700:	e008      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	223f      	movs	r2, #63	@ 0x3f
 8003706:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800370a:	e003      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2222      	movs	r2, #34	@ 0x22
 8003720:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3308      	adds	r3, #8
 800372a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	657b      	str	r3, [r7, #84]	@ 0x54
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3308      	adds	r3, #8
 8003742:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003744:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003746:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800374a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e5      	bne.n	8003724 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003760:	d107      	bne.n	8003772 <UART_Start_Receive_IT+0x102>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a21      	ldr	r2, [pc, #132]	@ (80037f4 <UART_Start_Receive_IT+0x184>)
 800376e:	669a      	str	r2, [r3, #104]	@ 0x68
 8003770:	e002      	b.n	8003778 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a20      	ldr	r2, [pc, #128]	@ (80037f8 <UART_Start_Receive_IT+0x188>)
 8003776:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d019      	beq.n	80037b4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003794:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800379e:	637b      	str	r3, [r7, #52]	@ 0x34
 80037a0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80037ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e6      	bne.n	8003780 <UART_Start_Receive_IT+0x110>
 80037b2:	e018      	b.n	80037e6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	613b      	str	r3, [r7, #16]
   return(result);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f043 0320 	orr.w	r3, r3, #32
 80037c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037d2:	623b      	str	r3, [r7, #32]
 80037d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	69f9      	ldr	r1, [r7, #28]
 80037d8:	6a3a      	ldr	r2, [r7, #32]
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	61bb      	str	r3, [r7, #24]
   return(result);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e6      	bne.n	80037b4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	375c      	adds	r7, #92	@ 0x5c
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	08003b01 	.word	0x08003b01
 80037f8:	08003945 	.word	0x08003945

080037fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b095      	sub	sp, #84	@ 0x54
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003822:	643b      	str	r3, [r7, #64]	@ 0x40
 8003824:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e6      	bne.n	8003804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3308      	adds	r3, #8
 800383c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	61fb      	str	r3, [r7, #28]
   return(result);
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3308      	adds	r3, #8
 8003854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800385c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e5      	bne.n	8003836 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386e:	2b01      	cmp	r3, #1
 8003870:	d118      	bne.n	80038a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f023 0310 	bic.w	r3, r3, #16
 8003886:	647b      	str	r3, [r7, #68]	@ 0x44
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	6979      	ldr	r1, [r7, #20]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	613b      	str	r3, [r7, #16]
   return(result);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e6      	bne.n	8003872 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80038b8:	bf00      	nop
 80038ba:	3754      	adds	r7, #84	@ 0x54
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f7ff faca 	bl	8002e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	60bb      	str	r3, [r7, #8]
   return(result);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6979      	ldr	r1, [r7, #20]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	613b      	str	r3, [r7, #16]
   return(result);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e6      	bne.n	80038f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fa96 	bl	8002e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800393c:	bf00      	nop
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b09c      	sub	sp, #112	@ 0x70
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003952:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800395c:	2b22      	cmp	r3, #34	@ 0x22
 800395e:	f040 80be 	bne.w	8003ade <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003968:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800396c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003970:	b2d9      	uxtb	r1, r3
 8003972:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003976:	b2da      	uxtb	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397c:	400a      	ands	r2, r1
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f040 80a3 	bne.w	8003af2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e6      	bne.n	80039ac <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3308      	adds	r3, #8
 80039e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3308      	adds	r3, #8
 80039fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80039fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e5      	bne.n	80039de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a34      	ldr	r2, [pc, #208]	@ (8003afc <UART_RxISR_8BIT+0x1b8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d01f      	beq.n	8003a70 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d018      	beq.n	8003a70 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a52:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e6      	bne.n	8003a3e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d12e      	bne.n	8003ad6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0310 	bic.w	r3, r3, #16
 8003a92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa0:	69b9      	ldr	r1, [r7, #24]
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	e841 2300 	strex	r3, r2, [r1]
 8003aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e6      	bne.n	8003a7e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b10      	cmp	r3, #16
 8003abc:	d103      	bne.n	8003ac6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2210      	movs	r2, #16
 8003ac4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003acc:	4619      	mov	r1, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff f9de 	bl	8002e90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ad4:	e00d      	b.n	8003af2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fd f878 	bl	8000bcc <HAL_UART_RxCpltCallback>
}
 8003adc:	e009      	b.n	8003af2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	8b1b      	ldrh	r3, [r3, #24]
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0208 	orr.w	r2, r2, #8
 8003aee:	b292      	uxth	r2, r2
 8003af0:	831a      	strh	r2, [r3, #24]
}
 8003af2:	bf00      	nop
 8003af4:	3770      	adds	r7, #112	@ 0x70
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40008000 	.word	0x40008000

08003b00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b09c      	sub	sp, #112	@ 0x70
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b0e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b18:	2b22      	cmp	r3, #34	@ 0x22
 8003b1a:	f040 80be 	bne.w	8003c9a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003b24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b2e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003b32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003b36:	4013      	ands	r3, r2
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b42:	1c9a      	adds	r2, r3, #2
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f040 80a3 	bne.w	8003cae <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b70:	e853 3f00 	ldrex	r3, [r3]
 8003b74:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b86:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b88:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003b8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e6      	bne.n	8003b68 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba4:	e853 3f00 	ldrex	r3, [r3]
 8003ba8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003bba:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bc2:	e841 2300 	strex	r3, r2, [r1]
 8003bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1e5      	bne.n	8003b9a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a34      	ldr	r2, [pc, #208]	@ (8003cb8 <UART_RxISR_16BIT+0x1b8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d01f      	beq.n	8003c2c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d018      	beq.n	8003c2c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c1a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e6      	bne.n	8003bfa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d12e      	bne.n	8003c92 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f023 0310 	bic.w	r3, r3, #16
 8003c4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	6979      	ldr	r1, [r7, #20]
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	613b      	str	r3, [r7, #16]
   return(result);
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e6      	bne.n	8003c3a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d103      	bne.n	8003c82 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2210      	movs	r2, #16
 8003c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c88:	4619      	mov	r1, r3
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff f900 	bl	8002e90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c90:	e00d      	b.n	8003cae <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fc ff9a 	bl	8000bcc <HAL_UART_RxCpltCallback>
}
 8003c98:	e009      	b.n	8003cae <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	8b1b      	ldrh	r3, [r3, #24]
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0208 	orr.w	r2, r2, #8
 8003caa:	b292      	uxth	r2, r2
 8003cac:	831a      	strh	r2, [r3, #24]
}
 8003cae:	bf00      	nop
 8003cb0:	3770      	adds	r7, #112	@ 0x70
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40008000 	.word	0x40008000

08003cbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <std>:
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	b510      	push	{r4, lr}
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8003cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cde:	6083      	str	r3, [r0, #8]
 8003ce0:	8181      	strh	r1, [r0, #12]
 8003ce2:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ce4:	81c2      	strh	r2, [r0, #14]
 8003ce6:	6183      	str	r3, [r0, #24]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	2208      	movs	r2, #8
 8003cec:	305c      	adds	r0, #92	@ 0x5c
 8003cee:	f000 f9f9 	bl	80040e4 <memset>
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d28 <std+0x58>)
 8003cf4:	6263      	str	r3, [r4, #36]	@ 0x24
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <std+0x5c>)
 8003cf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003d30 <std+0x60>)
 8003cfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003d34 <std+0x64>)
 8003d00:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d02:	4b0d      	ldr	r3, [pc, #52]	@ (8003d38 <std+0x68>)
 8003d04:	6224      	str	r4, [r4, #32]
 8003d06:	429c      	cmp	r4, r3
 8003d08:	d006      	beq.n	8003d18 <std+0x48>
 8003d0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d0e:	4294      	cmp	r4, r2
 8003d10:	d002      	beq.n	8003d18 <std+0x48>
 8003d12:	33d0      	adds	r3, #208	@ 0xd0
 8003d14:	429c      	cmp	r4, r3
 8003d16:	d105      	bne.n	8003d24 <std+0x54>
 8003d18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d20:	f000 ba58 	b.w	80041d4 <__retarget_lock_init_recursive>
 8003d24:	bd10      	pop	{r4, pc}
 8003d26:	bf00      	nop
 8003d28:	08003f35 	.word	0x08003f35
 8003d2c:	08003f57 	.word	0x08003f57
 8003d30:	08003f8f 	.word	0x08003f8f
 8003d34:	08003fb3 	.word	0x08003fb3
 8003d38:	20000158 	.word	0x20000158

08003d3c <stdio_exit_handler>:
 8003d3c:	4a02      	ldr	r2, [pc, #8]	@ (8003d48 <stdio_exit_handler+0xc>)
 8003d3e:	4903      	ldr	r1, [pc, #12]	@ (8003d4c <stdio_exit_handler+0x10>)
 8003d40:	4803      	ldr	r0, [pc, #12]	@ (8003d50 <stdio_exit_handler+0x14>)
 8003d42:	f000 b869 	b.w	8003e18 <_fwalk_sglue>
 8003d46:	bf00      	nop
 8003d48:	2000000c 	.word	0x2000000c
 8003d4c:	08004a71 	.word	0x08004a71
 8003d50:	2000001c 	.word	0x2000001c

08003d54 <cleanup_stdio>:
 8003d54:	6841      	ldr	r1, [r0, #4]
 8003d56:	4b0c      	ldr	r3, [pc, #48]	@ (8003d88 <cleanup_stdio+0x34>)
 8003d58:	4299      	cmp	r1, r3
 8003d5a:	b510      	push	{r4, lr}
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	d001      	beq.n	8003d64 <cleanup_stdio+0x10>
 8003d60:	f000 fe86 	bl	8004a70 <_fflush_r>
 8003d64:	68a1      	ldr	r1, [r4, #8]
 8003d66:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <cleanup_stdio+0x38>)
 8003d68:	4299      	cmp	r1, r3
 8003d6a:	d002      	beq.n	8003d72 <cleanup_stdio+0x1e>
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	f000 fe7f 	bl	8004a70 <_fflush_r>
 8003d72:	68e1      	ldr	r1, [r4, #12]
 8003d74:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <cleanup_stdio+0x3c>)
 8003d76:	4299      	cmp	r1, r3
 8003d78:	d004      	beq.n	8003d84 <cleanup_stdio+0x30>
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d80:	f000 be76 	b.w	8004a70 <_fflush_r>
 8003d84:	bd10      	pop	{r4, pc}
 8003d86:	bf00      	nop
 8003d88:	20000158 	.word	0x20000158
 8003d8c:	200001c0 	.word	0x200001c0
 8003d90:	20000228 	.word	0x20000228

08003d94 <global_stdio_init.part.0>:
 8003d94:	b510      	push	{r4, lr}
 8003d96:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc4 <global_stdio_init.part.0+0x30>)
 8003d98:	4c0b      	ldr	r4, [pc, #44]	@ (8003dc8 <global_stdio_init.part.0+0x34>)
 8003d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003dcc <global_stdio_init.part.0+0x38>)
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	4620      	mov	r0, r4
 8003da0:	2200      	movs	r2, #0
 8003da2:	2104      	movs	r1, #4
 8003da4:	f7ff ff94 	bl	8003cd0 <std>
 8003da8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003dac:	2201      	movs	r2, #1
 8003dae:	2109      	movs	r1, #9
 8003db0:	f7ff ff8e 	bl	8003cd0 <std>
 8003db4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003db8:	2202      	movs	r2, #2
 8003dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dbe:	2112      	movs	r1, #18
 8003dc0:	f7ff bf86 	b.w	8003cd0 <std>
 8003dc4:	20000290 	.word	0x20000290
 8003dc8:	20000158 	.word	0x20000158
 8003dcc:	08003d3d 	.word	0x08003d3d

08003dd0 <__sfp_lock_acquire>:
 8003dd0:	4801      	ldr	r0, [pc, #4]	@ (8003dd8 <__sfp_lock_acquire+0x8>)
 8003dd2:	f000 ba00 	b.w	80041d6 <__retarget_lock_acquire_recursive>
 8003dd6:	bf00      	nop
 8003dd8:	20000299 	.word	0x20000299

08003ddc <__sfp_lock_release>:
 8003ddc:	4801      	ldr	r0, [pc, #4]	@ (8003de4 <__sfp_lock_release+0x8>)
 8003dde:	f000 b9fb 	b.w	80041d8 <__retarget_lock_release_recursive>
 8003de2:	bf00      	nop
 8003de4:	20000299 	.word	0x20000299

08003de8 <__sinit>:
 8003de8:	b510      	push	{r4, lr}
 8003dea:	4604      	mov	r4, r0
 8003dec:	f7ff fff0 	bl	8003dd0 <__sfp_lock_acquire>
 8003df0:	6a23      	ldr	r3, [r4, #32]
 8003df2:	b11b      	cbz	r3, 8003dfc <__sinit+0x14>
 8003df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003df8:	f7ff bff0 	b.w	8003ddc <__sfp_lock_release>
 8003dfc:	4b04      	ldr	r3, [pc, #16]	@ (8003e10 <__sinit+0x28>)
 8003dfe:	6223      	str	r3, [r4, #32]
 8003e00:	4b04      	ldr	r3, [pc, #16]	@ (8003e14 <__sinit+0x2c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f5      	bne.n	8003df4 <__sinit+0xc>
 8003e08:	f7ff ffc4 	bl	8003d94 <global_stdio_init.part.0>
 8003e0c:	e7f2      	b.n	8003df4 <__sinit+0xc>
 8003e0e:	bf00      	nop
 8003e10:	08003d55 	.word	0x08003d55
 8003e14:	20000290 	.word	0x20000290

08003e18 <_fwalk_sglue>:
 8003e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e1c:	4607      	mov	r7, r0
 8003e1e:	4688      	mov	r8, r1
 8003e20:	4614      	mov	r4, r2
 8003e22:	2600      	movs	r6, #0
 8003e24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e28:	f1b9 0901 	subs.w	r9, r9, #1
 8003e2c:	d505      	bpl.n	8003e3a <_fwalk_sglue+0x22>
 8003e2e:	6824      	ldr	r4, [r4, #0]
 8003e30:	2c00      	cmp	r4, #0
 8003e32:	d1f7      	bne.n	8003e24 <_fwalk_sglue+0xc>
 8003e34:	4630      	mov	r0, r6
 8003e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e3a:	89ab      	ldrh	r3, [r5, #12]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d907      	bls.n	8003e50 <_fwalk_sglue+0x38>
 8003e40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e44:	3301      	adds	r3, #1
 8003e46:	d003      	beq.n	8003e50 <_fwalk_sglue+0x38>
 8003e48:	4629      	mov	r1, r5
 8003e4a:	4638      	mov	r0, r7
 8003e4c:	47c0      	blx	r8
 8003e4e:	4306      	orrs	r6, r0
 8003e50:	3568      	adds	r5, #104	@ 0x68
 8003e52:	e7e9      	b.n	8003e28 <_fwalk_sglue+0x10>

08003e54 <iprintf>:
 8003e54:	b40f      	push	{r0, r1, r2, r3}
 8003e56:	b507      	push	{r0, r1, r2, lr}
 8003e58:	4906      	ldr	r1, [pc, #24]	@ (8003e74 <iprintf+0x20>)
 8003e5a:	ab04      	add	r3, sp, #16
 8003e5c:	6808      	ldr	r0, [r1, #0]
 8003e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e62:	6881      	ldr	r1, [r0, #8]
 8003e64:	9301      	str	r3, [sp, #4]
 8003e66:	f000 fadb 	bl	8004420 <_vfiprintf_r>
 8003e6a:	b003      	add	sp, #12
 8003e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e70:	b004      	add	sp, #16
 8003e72:	4770      	bx	lr
 8003e74:	20000018 	.word	0x20000018

08003e78 <_puts_r>:
 8003e78:	6a03      	ldr	r3, [r0, #32]
 8003e7a:	b570      	push	{r4, r5, r6, lr}
 8003e7c:	6884      	ldr	r4, [r0, #8]
 8003e7e:	4605      	mov	r5, r0
 8003e80:	460e      	mov	r6, r1
 8003e82:	b90b      	cbnz	r3, 8003e88 <_puts_r+0x10>
 8003e84:	f7ff ffb0 	bl	8003de8 <__sinit>
 8003e88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e8a:	07db      	lsls	r3, r3, #31
 8003e8c:	d405      	bmi.n	8003e9a <_puts_r+0x22>
 8003e8e:	89a3      	ldrh	r3, [r4, #12]
 8003e90:	0598      	lsls	r0, r3, #22
 8003e92:	d402      	bmi.n	8003e9a <_puts_r+0x22>
 8003e94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e96:	f000 f99e 	bl	80041d6 <__retarget_lock_acquire_recursive>
 8003e9a:	89a3      	ldrh	r3, [r4, #12]
 8003e9c:	0719      	lsls	r1, r3, #28
 8003e9e:	d502      	bpl.n	8003ea6 <_puts_r+0x2e>
 8003ea0:	6923      	ldr	r3, [r4, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d135      	bne.n	8003f12 <_puts_r+0x9a>
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	f000 f8c5 	bl	8004038 <__swsetup_r>
 8003eae:	b380      	cbz	r0, 8003f12 <_puts_r+0x9a>
 8003eb0:	f04f 35ff 	mov.w	r5, #4294967295
 8003eb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003eb6:	07da      	lsls	r2, r3, #31
 8003eb8:	d405      	bmi.n	8003ec6 <_puts_r+0x4e>
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	059b      	lsls	r3, r3, #22
 8003ebe:	d402      	bmi.n	8003ec6 <_puts_r+0x4e>
 8003ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ec2:	f000 f989 	bl	80041d8 <__retarget_lock_release_recursive>
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	bd70      	pop	{r4, r5, r6, pc}
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	da04      	bge.n	8003ed8 <_puts_r+0x60>
 8003ece:	69a2      	ldr	r2, [r4, #24]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	dc17      	bgt.n	8003f04 <_puts_r+0x8c>
 8003ed4:	290a      	cmp	r1, #10
 8003ed6:	d015      	beq.n	8003f04 <_puts_r+0x8c>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	6022      	str	r2, [r4, #0]
 8003ede:	7019      	strb	r1, [r3, #0]
 8003ee0:	68a3      	ldr	r3, [r4, #8]
 8003ee2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	60a3      	str	r3, [r4, #8]
 8003eea:	2900      	cmp	r1, #0
 8003eec:	d1ed      	bne.n	8003eca <_puts_r+0x52>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da11      	bge.n	8003f16 <_puts_r+0x9e>
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	210a      	movs	r1, #10
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f000 f85f 	bl	8003fba <__swbuf_r>
 8003efc:	3001      	adds	r0, #1
 8003efe:	d0d7      	beq.n	8003eb0 <_puts_r+0x38>
 8003f00:	250a      	movs	r5, #10
 8003f02:	e7d7      	b.n	8003eb4 <_puts_r+0x3c>
 8003f04:	4622      	mov	r2, r4
 8003f06:	4628      	mov	r0, r5
 8003f08:	f000 f857 	bl	8003fba <__swbuf_r>
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d1e7      	bne.n	8003ee0 <_puts_r+0x68>
 8003f10:	e7ce      	b.n	8003eb0 <_puts_r+0x38>
 8003f12:	3e01      	subs	r6, #1
 8003f14:	e7e4      	b.n	8003ee0 <_puts_r+0x68>
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	6022      	str	r2, [r4, #0]
 8003f1c:	220a      	movs	r2, #10
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	e7ee      	b.n	8003f00 <_puts_r+0x88>
	...

08003f24 <puts>:
 8003f24:	4b02      	ldr	r3, [pc, #8]	@ (8003f30 <puts+0xc>)
 8003f26:	4601      	mov	r1, r0
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	f7ff bfa5 	b.w	8003e78 <_puts_r>
 8003f2e:	bf00      	nop
 8003f30:	20000018 	.word	0x20000018

08003f34 <__sread>:
 8003f34:	b510      	push	{r4, lr}
 8003f36:	460c      	mov	r4, r1
 8003f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3c:	f000 f8fc 	bl	8004138 <_read_r>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	bfab      	itete	ge
 8003f44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f46:	89a3      	ldrhlt	r3, [r4, #12]
 8003f48:	181b      	addge	r3, r3, r0
 8003f4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f4e:	bfac      	ite	ge
 8003f50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f52:	81a3      	strhlt	r3, [r4, #12]
 8003f54:	bd10      	pop	{r4, pc}

08003f56 <__swrite>:
 8003f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5a:	461f      	mov	r7, r3
 8003f5c:	898b      	ldrh	r3, [r1, #12]
 8003f5e:	05db      	lsls	r3, r3, #23
 8003f60:	4605      	mov	r5, r0
 8003f62:	460c      	mov	r4, r1
 8003f64:	4616      	mov	r6, r2
 8003f66:	d505      	bpl.n	8003f74 <__swrite+0x1e>
 8003f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f000 f8d0 	bl	8004114 <_lseek_r>
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f7e:	81a3      	strh	r3, [r4, #12]
 8003f80:	4632      	mov	r2, r6
 8003f82:	463b      	mov	r3, r7
 8003f84:	4628      	mov	r0, r5
 8003f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8a:	f000 b8e7 	b.w	800415c <_write_r>

08003f8e <__sseek>:
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	460c      	mov	r4, r1
 8003f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f96:	f000 f8bd 	bl	8004114 <_lseek_r>
 8003f9a:	1c43      	adds	r3, r0, #1
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	bf15      	itete	ne
 8003fa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003fa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003fa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003faa:	81a3      	strheq	r3, [r4, #12]
 8003fac:	bf18      	it	ne
 8003fae:	81a3      	strhne	r3, [r4, #12]
 8003fb0:	bd10      	pop	{r4, pc}

08003fb2 <__sclose>:
 8003fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb6:	f000 b89d 	b.w	80040f4 <_close_r>

08003fba <__swbuf_r>:
 8003fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbc:	460e      	mov	r6, r1
 8003fbe:	4614      	mov	r4, r2
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	b118      	cbz	r0, 8003fcc <__swbuf_r+0x12>
 8003fc4:	6a03      	ldr	r3, [r0, #32]
 8003fc6:	b90b      	cbnz	r3, 8003fcc <__swbuf_r+0x12>
 8003fc8:	f7ff ff0e 	bl	8003de8 <__sinit>
 8003fcc:	69a3      	ldr	r3, [r4, #24]
 8003fce:	60a3      	str	r3, [r4, #8]
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	071a      	lsls	r2, r3, #28
 8003fd4:	d501      	bpl.n	8003fda <__swbuf_r+0x20>
 8003fd6:	6923      	ldr	r3, [r4, #16]
 8003fd8:	b943      	cbnz	r3, 8003fec <__swbuf_r+0x32>
 8003fda:	4621      	mov	r1, r4
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f000 f82b 	bl	8004038 <__swsetup_r>
 8003fe2:	b118      	cbz	r0, 8003fec <__swbuf_r+0x32>
 8003fe4:	f04f 37ff 	mov.w	r7, #4294967295
 8003fe8:	4638      	mov	r0, r7
 8003fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	6922      	ldr	r2, [r4, #16]
 8003ff0:	1a98      	subs	r0, r3, r2
 8003ff2:	6963      	ldr	r3, [r4, #20]
 8003ff4:	b2f6      	uxtb	r6, r6
 8003ff6:	4283      	cmp	r3, r0
 8003ff8:	4637      	mov	r7, r6
 8003ffa:	dc05      	bgt.n	8004008 <__swbuf_r+0x4e>
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	f000 fd36 	bl	8004a70 <_fflush_r>
 8004004:	2800      	cmp	r0, #0
 8004006:	d1ed      	bne.n	8003fe4 <__swbuf_r+0x2a>
 8004008:	68a3      	ldr	r3, [r4, #8]
 800400a:	3b01      	subs	r3, #1
 800400c:	60a3      	str	r3, [r4, #8]
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	6022      	str	r2, [r4, #0]
 8004014:	701e      	strb	r6, [r3, #0]
 8004016:	6962      	ldr	r2, [r4, #20]
 8004018:	1c43      	adds	r3, r0, #1
 800401a:	429a      	cmp	r2, r3
 800401c:	d004      	beq.n	8004028 <__swbuf_r+0x6e>
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	07db      	lsls	r3, r3, #31
 8004022:	d5e1      	bpl.n	8003fe8 <__swbuf_r+0x2e>
 8004024:	2e0a      	cmp	r6, #10
 8004026:	d1df      	bne.n	8003fe8 <__swbuf_r+0x2e>
 8004028:	4621      	mov	r1, r4
 800402a:	4628      	mov	r0, r5
 800402c:	f000 fd20 	bl	8004a70 <_fflush_r>
 8004030:	2800      	cmp	r0, #0
 8004032:	d0d9      	beq.n	8003fe8 <__swbuf_r+0x2e>
 8004034:	e7d6      	b.n	8003fe4 <__swbuf_r+0x2a>
	...

08004038 <__swsetup_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4b29      	ldr	r3, [pc, #164]	@ (80040e0 <__swsetup_r+0xa8>)
 800403c:	4605      	mov	r5, r0
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	460c      	mov	r4, r1
 8004042:	b118      	cbz	r0, 800404c <__swsetup_r+0x14>
 8004044:	6a03      	ldr	r3, [r0, #32]
 8004046:	b90b      	cbnz	r3, 800404c <__swsetup_r+0x14>
 8004048:	f7ff fece 	bl	8003de8 <__sinit>
 800404c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004050:	0719      	lsls	r1, r3, #28
 8004052:	d422      	bmi.n	800409a <__swsetup_r+0x62>
 8004054:	06da      	lsls	r2, r3, #27
 8004056:	d407      	bmi.n	8004068 <__swsetup_r+0x30>
 8004058:	2209      	movs	r2, #9
 800405a:	602a      	str	r2, [r5, #0]
 800405c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004060:	81a3      	strh	r3, [r4, #12]
 8004062:	f04f 30ff 	mov.w	r0, #4294967295
 8004066:	e033      	b.n	80040d0 <__swsetup_r+0x98>
 8004068:	0758      	lsls	r0, r3, #29
 800406a:	d512      	bpl.n	8004092 <__swsetup_r+0x5a>
 800406c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800406e:	b141      	cbz	r1, 8004082 <__swsetup_r+0x4a>
 8004070:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004074:	4299      	cmp	r1, r3
 8004076:	d002      	beq.n	800407e <__swsetup_r+0x46>
 8004078:	4628      	mov	r0, r5
 800407a:	f000 f8af 	bl	80041dc <_free_r>
 800407e:	2300      	movs	r3, #0
 8004080:	6363      	str	r3, [r4, #52]	@ 0x34
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004088:	81a3      	strh	r3, [r4, #12]
 800408a:	2300      	movs	r3, #0
 800408c:	6063      	str	r3, [r4, #4]
 800408e:	6923      	ldr	r3, [r4, #16]
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	f043 0308 	orr.w	r3, r3, #8
 8004098:	81a3      	strh	r3, [r4, #12]
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	b94b      	cbnz	r3, 80040b2 <__swsetup_r+0x7a>
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80040a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040a8:	d003      	beq.n	80040b2 <__swsetup_r+0x7a>
 80040aa:	4621      	mov	r1, r4
 80040ac:	4628      	mov	r0, r5
 80040ae:	f000 fd2d 	bl	8004b0c <__smakebuf_r>
 80040b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b6:	f013 0201 	ands.w	r2, r3, #1
 80040ba:	d00a      	beq.n	80040d2 <__swsetup_r+0x9a>
 80040bc:	2200      	movs	r2, #0
 80040be:	60a2      	str	r2, [r4, #8]
 80040c0:	6962      	ldr	r2, [r4, #20]
 80040c2:	4252      	negs	r2, r2
 80040c4:	61a2      	str	r2, [r4, #24]
 80040c6:	6922      	ldr	r2, [r4, #16]
 80040c8:	b942      	cbnz	r2, 80040dc <__swsetup_r+0xa4>
 80040ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80040ce:	d1c5      	bne.n	800405c <__swsetup_r+0x24>
 80040d0:	bd38      	pop	{r3, r4, r5, pc}
 80040d2:	0799      	lsls	r1, r3, #30
 80040d4:	bf58      	it	pl
 80040d6:	6962      	ldrpl	r2, [r4, #20]
 80040d8:	60a2      	str	r2, [r4, #8]
 80040da:	e7f4      	b.n	80040c6 <__swsetup_r+0x8e>
 80040dc:	2000      	movs	r0, #0
 80040de:	e7f7      	b.n	80040d0 <__swsetup_r+0x98>
 80040e0:	20000018 	.word	0x20000018

080040e4 <memset>:
 80040e4:	4402      	add	r2, r0
 80040e6:	4603      	mov	r3, r0
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d100      	bne.n	80040ee <memset+0xa>
 80040ec:	4770      	bx	lr
 80040ee:	f803 1b01 	strb.w	r1, [r3], #1
 80040f2:	e7f9      	b.n	80040e8 <memset+0x4>

080040f4 <_close_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4d06      	ldr	r5, [pc, #24]	@ (8004110 <_close_r+0x1c>)
 80040f8:	2300      	movs	r3, #0
 80040fa:	4604      	mov	r4, r0
 80040fc:	4608      	mov	r0, r1
 80040fe:	602b      	str	r3, [r5, #0]
 8004100:	f7fc fc51 	bl	80009a6 <_close>
 8004104:	1c43      	adds	r3, r0, #1
 8004106:	d102      	bne.n	800410e <_close_r+0x1a>
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	b103      	cbz	r3, 800410e <_close_r+0x1a>
 800410c:	6023      	str	r3, [r4, #0]
 800410e:	bd38      	pop	{r3, r4, r5, pc}
 8004110:	20000294 	.word	0x20000294

08004114 <_lseek_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	4d07      	ldr	r5, [pc, #28]	@ (8004134 <_lseek_r+0x20>)
 8004118:	4604      	mov	r4, r0
 800411a:	4608      	mov	r0, r1
 800411c:	4611      	mov	r1, r2
 800411e:	2200      	movs	r2, #0
 8004120:	602a      	str	r2, [r5, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	f7fc fc66 	bl	80009f4 <_lseek>
 8004128:	1c43      	adds	r3, r0, #1
 800412a:	d102      	bne.n	8004132 <_lseek_r+0x1e>
 800412c:	682b      	ldr	r3, [r5, #0]
 800412e:	b103      	cbz	r3, 8004132 <_lseek_r+0x1e>
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	bd38      	pop	{r3, r4, r5, pc}
 8004134:	20000294 	.word	0x20000294

08004138 <_read_r>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	4d07      	ldr	r5, [pc, #28]	@ (8004158 <_read_r+0x20>)
 800413c:	4604      	mov	r4, r0
 800413e:	4608      	mov	r0, r1
 8004140:	4611      	mov	r1, r2
 8004142:	2200      	movs	r2, #0
 8004144:	602a      	str	r2, [r5, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	f7fc fbf4 	bl	8000934 <_read>
 800414c:	1c43      	adds	r3, r0, #1
 800414e:	d102      	bne.n	8004156 <_read_r+0x1e>
 8004150:	682b      	ldr	r3, [r5, #0]
 8004152:	b103      	cbz	r3, 8004156 <_read_r+0x1e>
 8004154:	6023      	str	r3, [r4, #0]
 8004156:	bd38      	pop	{r3, r4, r5, pc}
 8004158:	20000294 	.word	0x20000294

0800415c <_write_r>:
 800415c:	b538      	push	{r3, r4, r5, lr}
 800415e:	4d07      	ldr	r5, [pc, #28]	@ (800417c <_write_r+0x20>)
 8004160:	4604      	mov	r4, r0
 8004162:	4608      	mov	r0, r1
 8004164:	4611      	mov	r1, r2
 8004166:	2200      	movs	r2, #0
 8004168:	602a      	str	r2, [r5, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	f7fc fbff 	bl	800096e <_write>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d102      	bne.n	800417a <_write_r+0x1e>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	b103      	cbz	r3, 800417a <_write_r+0x1e>
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	20000294 	.word	0x20000294

08004180 <__errno>:
 8004180:	4b01      	ldr	r3, [pc, #4]	@ (8004188 <__errno+0x8>)
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	20000018 	.word	0x20000018

0800418c <__libc_init_array>:
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	4d0d      	ldr	r5, [pc, #52]	@ (80041c4 <__libc_init_array+0x38>)
 8004190:	4c0d      	ldr	r4, [pc, #52]	@ (80041c8 <__libc_init_array+0x3c>)
 8004192:	1b64      	subs	r4, r4, r5
 8004194:	10a4      	asrs	r4, r4, #2
 8004196:	2600      	movs	r6, #0
 8004198:	42a6      	cmp	r6, r4
 800419a:	d109      	bne.n	80041b0 <__libc_init_array+0x24>
 800419c:	4d0b      	ldr	r5, [pc, #44]	@ (80041cc <__libc_init_array+0x40>)
 800419e:	4c0c      	ldr	r4, [pc, #48]	@ (80041d0 <__libc_init_array+0x44>)
 80041a0:	f000 fd22 	bl	8004be8 <_init>
 80041a4:	1b64      	subs	r4, r4, r5
 80041a6:	10a4      	asrs	r4, r4, #2
 80041a8:	2600      	movs	r6, #0
 80041aa:	42a6      	cmp	r6, r4
 80041ac:	d105      	bne.n	80041ba <__libc_init_array+0x2e>
 80041ae:	bd70      	pop	{r4, r5, r6, pc}
 80041b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b4:	4798      	blx	r3
 80041b6:	3601      	adds	r6, #1
 80041b8:	e7ee      	b.n	8004198 <__libc_init_array+0xc>
 80041ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80041be:	4798      	blx	r3
 80041c0:	3601      	adds	r6, #1
 80041c2:	e7f2      	b.n	80041aa <__libc_init_array+0x1e>
 80041c4:	08004d00 	.word	0x08004d00
 80041c8:	08004d00 	.word	0x08004d00
 80041cc:	08004d00 	.word	0x08004d00
 80041d0:	08004d04 	.word	0x08004d04

080041d4 <__retarget_lock_init_recursive>:
 80041d4:	4770      	bx	lr

080041d6 <__retarget_lock_acquire_recursive>:
 80041d6:	4770      	bx	lr

080041d8 <__retarget_lock_release_recursive>:
 80041d8:	4770      	bx	lr
	...

080041dc <_free_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4605      	mov	r5, r0
 80041e0:	2900      	cmp	r1, #0
 80041e2:	d041      	beq.n	8004268 <_free_r+0x8c>
 80041e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041e8:	1f0c      	subs	r4, r1, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bfb8      	it	lt
 80041ee:	18e4      	addlt	r4, r4, r3
 80041f0:	f000 f8e0 	bl	80043b4 <__malloc_lock>
 80041f4:	4a1d      	ldr	r2, [pc, #116]	@ (800426c <_free_r+0x90>)
 80041f6:	6813      	ldr	r3, [r2, #0]
 80041f8:	b933      	cbnz	r3, 8004208 <_free_r+0x2c>
 80041fa:	6063      	str	r3, [r4, #4]
 80041fc:	6014      	str	r4, [r2, #0]
 80041fe:	4628      	mov	r0, r5
 8004200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004204:	f000 b8dc 	b.w	80043c0 <__malloc_unlock>
 8004208:	42a3      	cmp	r3, r4
 800420a:	d908      	bls.n	800421e <_free_r+0x42>
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	1821      	adds	r1, r4, r0
 8004210:	428b      	cmp	r3, r1
 8004212:	bf01      	itttt	eq
 8004214:	6819      	ldreq	r1, [r3, #0]
 8004216:	685b      	ldreq	r3, [r3, #4]
 8004218:	1809      	addeq	r1, r1, r0
 800421a:	6021      	streq	r1, [r4, #0]
 800421c:	e7ed      	b.n	80041fa <_free_r+0x1e>
 800421e:	461a      	mov	r2, r3
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	b10b      	cbz	r3, 8004228 <_free_r+0x4c>
 8004224:	42a3      	cmp	r3, r4
 8004226:	d9fa      	bls.n	800421e <_free_r+0x42>
 8004228:	6811      	ldr	r1, [r2, #0]
 800422a:	1850      	adds	r0, r2, r1
 800422c:	42a0      	cmp	r0, r4
 800422e:	d10b      	bne.n	8004248 <_free_r+0x6c>
 8004230:	6820      	ldr	r0, [r4, #0]
 8004232:	4401      	add	r1, r0
 8004234:	1850      	adds	r0, r2, r1
 8004236:	4283      	cmp	r3, r0
 8004238:	6011      	str	r1, [r2, #0]
 800423a:	d1e0      	bne.n	80041fe <_free_r+0x22>
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	6053      	str	r3, [r2, #4]
 8004242:	4408      	add	r0, r1
 8004244:	6010      	str	r0, [r2, #0]
 8004246:	e7da      	b.n	80041fe <_free_r+0x22>
 8004248:	d902      	bls.n	8004250 <_free_r+0x74>
 800424a:	230c      	movs	r3, #12
 800424c:	602b      	str	r3, [r5, #0]
 800424e:	e7d6      	b.n	80041fe <_free_r+0x22>
 8004250:	6820      	ldr	r0, [r4, #0]
 8004252:	1821      	adds	r1, r4, r0
 8004254:	428b      	cmp	r3, r1
 8004256:	bf04      	itt	eq
 8004258:	6819      	ldreq	r1, [r3, #0]
 800425a:	685b      	ldreq	r3, [r3, #4]
 800425c:	6063      	str	r3, [r4, #4]
 800425e:	bf04      	itt	eq
 8004260:	1809      	addeq	r1, r1, r0
 8004262:	6021      	streq	r1, [r4, #0]
 8004264:	6054      	str	r4, [r2, #4]
 8004266:	e7ca      	b.n	80041fe <_free_r+0x22>
 8004268:	bd38      	pop	{r3, r4, r5, pc}
 800426a:	bf00      	nop
 800426c:	200002a0 	.word	0x200002a0

08004270 <sbrk_aligned>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	4e0f      	ldr	r6, [pc, #60]	@ (80042b0 <sbrk_aligned+0x40>)
 8004274:	460c      	mov	r4, r1
 8004276:	6831      	ldr	r1, [r6, #0]
 8004278:	4605      	mov	r5, r0
 800427a:	b911      	cbnz	r1, 8004282 <sbrk_aligned+0x12>
 800427c:	f000 fca4 	bl	8004bc8 <_sbrk_r>
 8004280:	6030      	str	r0, [r6, #0]
 8004282:	4621      	mov	r1, r4
 8004284:	4628      	mov	r0, r5
 8004286:	f000 fc9f 	bl	8004bc8 <_sbrk_r>
 800428a:	1c43      	adds	r3, r0, #1
 800428c:	d103      	bne.n	8004296 <sbrk_aligned+0x26>
 800428e:	f04f 34ff 	mov.w	r4, #4294967295
 8004292:	4620      	mov	r0, r4
 8004294:	bd70      	pop	{r4, r5, r6, pc}
 8004296:	1cc4      	adds	r4, r0, #3
 8004298:	f024 0403 	bic.w	r4, r4, #3
 800429c:	42a0      	cmp	r0, r4
 800429e:	d0f8      	beq.n	8004292 <sbrk_aligned+0x22>
 80042a0:	1a21      	subs	r1, r4, r0
 80042a2:	4628      	mov	r0, r5
 80042a4:	f000 fc90 	bl	8004bc8 <_sbrk_r>
 80042a8:	3001      	adds	r0, #1
 80042aa:	d1f2      	bne.n	8004292 <sbrk_aligned+0x22>
 80042ac:	e7ef      	b.n	800428e <sbrk_aligned+0x1e>
 80042ae:	bf00      	nop
 80042b0:	2000029c 	.word	0x2000029c

080042b4 <_malloc_r>:
 80042b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b8:	1ccd      	adds	r5, r1, #3
 80042ba:	f025 0503 	bic.w	r5, r5, #3
 80042be:	3508      	adds	r5, #8
 80042c0:	2d0c      	cmp	r5, #12
 80042c2:	bf38      	it	cc
 80042c4:	250c      	movcc	r5, #12
 80042c6:	2d00      	cmp	r5, #0
 80042c8:	4606      	mov	r6, r0
 80042ca:	db01      	blt.n	80042d0 <_malloc_r+0x1c>
 80042cc:	42a9      	cmp	r1, r5
 80042ce:	d904      	bls.n	80042da <_malloc_r+0x26>
 80042d0:	230c      	movs	r3, #12
 80042d2:	6033      	str	r3, [r6, #0]
 80042d4:	2000      	movs	r0, #0
 80042d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043b0 <_malloc_r+0xfc>
 80042de:	f000 f869 	bl	80043b4 <__malloc_lock>
 80042e2:	f8d8 3000 	ldr.w	r3, [r8]
 80042e6:	461c      	mov	r4, r3
 80042e8:	bb44      	cbnz	r4, 800433c <_malloc_r+0x88>
 80042ea:	4629      	mov	r1, r5
 80042ec:	4630      	mov	r0, r6
 80042ee:	f7ff ffbf 	bl	8004270 <sbrk_aligned>
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	4604      	mov	r4, r0
 80042f6:	d158      	bne.n	80043aa <_malloc_r+0xf6>
 80042f8:	f8d8 4000 	ldr.w	r4, [r8]
 80042fc:	4627      	mov	r7, r4
 80042fe:	2f00      	cmp	r7, #0
 8004300:	d143      	bne.n	800438a <_malloc_r+0xd6>
 8004302:	2c00      	cmp	r4, #0
 8004304:	d04b      	beq.n	800439e <_malloc_r+0xea>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	4639      	mov	r1, r7
 800430a:	4630      	mov	r0, r6
 800430c:	eb04 0903 	add.w	r9, r4, r3
 8004310:	f000 fc5a 	bl	8004bc8 <_sbrk_r>
 8004314:	4581      	cmp	r9, r0
 8004316:	d142      	bne.n	800439e <_malloc_r+0xea>
 8004318:	6821      	ldr	r1, [r4, #0]
 800431a:	1a6d      	subs	r5, r5, r1
 800431c:	4629      	mov	r1, r5
 800431e:	4630      	mov	r0, r6
 8004320:	f7ff ffa6 	bl	8004270 <sbrk_aligned>
 8004324:	3001      	adds	r0, #1
 8004326:	d03a      	beq.n	800439e <_malloc_r+0xea>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	442b      	add	r3, r5
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	f8d8 3000 	ldr.w	r3, [r8]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	bb62      	cbnz	r2, 8004390 <_malloc_r+0xdc>
 8004336:	f8c8 7000 	str.w	r7, [r8]
 800433a:	e00f      	b.n	800435c <_malloc_r+0xa8>
 800433c:	6822      	ldr	r2, [r4, #0]
 800433e:	1b52      	subs	r2, r2, r5
 8004340:	d420      	bmi.n	8004384 <_malloc_r+0xd0>
 8004342:	2a0b      	cmp	r2, #11
 8004344:	d917      	bls.n	8004376 <_malloc_r+0xc2>
 8004346:	1961      	adds	r1, r4, r5
 8004348:	42a3      	cmp	r3, r4
 800434a:	6025      	str	r5, [r4, #0]
 800434c:	bf18      	it	ne
 800434e:	6059      	strne	r1, [r3, #4]
 8004350:	6863      	ldr	r3, [r4, #4]
 8004352:	bf08      	it	eq
 8004354:	f8c8 1000 	streq.w	r1, [r8]
 8004358:	5162      	str	r2, [r4, r5]
 800435a:	604b      	str	r3, [r1, #4]
 800435c:	4630      	mov	r0, r6
 800435e:	f000 f82f 	bl	80043c0 <__malloc_unlock>
 8004362:	f104 000b 	add.w	r0, r4, #11
 8004366:	1d23      	adds	r3, r4, #4
 8004368:	f020 0007 	bic.w	r0, r0, #7
 800436c:	1ac2      	subs	r2, r0, r3
 800436e:	bf1c      	itt	ne
 8004370:	1a1b      	subne	r3, r3, r0
 8004372:	50a3      	strne	r3, [r4, r2]
 8004374:	e7af      	b.n	80042d6 <_malloc_r+0x22>
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	42a3      	cmp	r3, r4
 800437a:	bf0c      	ite	eq
 800437c:	f8c8 2000 	streq.w	r2, [r8]
 8004380:	605a      	strne	r2, [r3, #4]
 8004382:	e7eb      	b.n	800435c <_malloc_r+0xa8>
 8004384:	4623      	mov	r3, r4
 8004386:	6864      	ldr	r4, [r4, #4]
 8004388:	e7ae      	b.n	80042e8 <_malloc_r+0x34>
 800438a:	463c      	mov	r4, r7
 800438c:	687f      	ldr	r7, [r7, #4]
 800438e:	e7b6      	b.n	80042fe <_malloc_r+0x4a>
 8004390:	461a      	mov	r2, r3
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	42a3      	cmp	r3, r4
 8004396:	d1fb      	bne.n	8004390 <_malloc_r+0xdc>
 8004398:	2300      	movs	r3, #0
 800439a:	6053      	str	r3, [r2, #4]
 800439c:	e7de      	b.n	800435c <_malloc_r+0xa8>
 800439e:	230c      	movs	r3, #12
 80043a0:	6033      	str	r3, [r6, #0]
 80043a2:	4630      	mov	r0, r6
 80043a4:	f000 f80c 	bl	80043c0 <__malloc_unlock>
 80043a8:	e794      	b.n	80042d4 <_malloc_r+0x20>
 80043aa:	6005      	str	r5, [r0, #0]
 80043ac:	e7d6      	b.n	800435c <_malloc_r+0xa8>
 80043ae:	bf00      	nop
 80043b0:	200002a0 	.word	0x200002a0

080043b4 <__malloc_lock>:
 80043b4:	4801      	ldr	r0, [pc, #4]	@ (80043bc <__malloc_lock+0x8>)
 80043b6:	f7ff bf0e 	b.w	80041d6 <__retarget_lock_acquire_recursive>
 80043ba:	bf00      	nop
 80043bc:	20000298 	.word	0x20000298

080043c0 <__malloc_unlock>:
 80043c0:	4801      	ldr	r0, [pc, #4]	@ (80043c8 <__malloc_unlock+0x8>)
 80043c2:	f7ff bf09 	b.w	80041d8 <__retarget_lock_release_recursive>
 80043c6:	bf00      	nop
 80043c8:	20000298 	.word	0x20000298

080043cc <__sfputc_r>:
 80043cc:	6893      	ldr	r3, [r2, #8]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	b410      	push	{r4}
 80043d4:	6093      	str	r3, [r2, #8]
 80043d6:	da08      	bge.n	80043ea <__sfputc_r+0x1e>
 80043d8:	6994      	ldr	r4, [r2, #24]
 80043da:	42a3      	cmp	r3, r4
 80043dc:	db01      	blt.n	80043e2 <__sfputc_r+0x16>
 80043de:	290a      	cmp	r1, #10
 80043e0:	d103      	bne.n	80043ea <__sfputc_r+0x1e>
 80043e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043e6:	f7ff bde8 	b.w	8003fba <__swbuf_r>
 80043ea:	6813      	ldr	r3, [r2, #0]
 80043ec:	1c58      	adds	r0, r3, #1
 80043ee:	6010      	str	r0, [r2, #0]
 80043f0:	7019      	strb	r1, [r3, #0]
 80043f2:	4608      	mov	r0, r1
 80043f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <__sfputs_r>:
 80043fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fc:	4606      	mov	r6, r0
 80043fe:	460f      	mov	r7, r1
 8004400:	4614      	mov	r4, r2
 8004402:	18d5      	adds	r5, r2, r3
 8004404:	42ac      	cmp	r4, r5
 8004406:	d101      	bne.n	800440c <__sfputs_r+0x12>
 8004408:	2000      	movs	r0, #0
 800440a:	e007      	b.n	800441c <__sfputs_r+0x22>
 800440c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004410:	463a      	mov	r2, r7
 8004412:	4630      	mov	r0, r6
 8004414:	f7ff ffda 	bl	80043cc <__sfputc_r>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d1f3      	bne.n	8004404 <__sfputs_r+0xa>
 800441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004420 <_vfiprintf_r>:
 8004420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004424:	460d      	mov	r5, r1
 8004426:	b09d      	sub	sp, #116	@ 0x74
 8004428:	4614      	mov	r4, r2
 800442a:	4698      	mov	r8, r3
 800442c:	4606      	mov	r6, r0
 800442e:	b118      	cbz	r0, 8004438 <_vfiprintf_r+0x18>
 8004430:	6a03      	ldr	r3, [r0, #32]
 8004432:	b90b      	cbnz	r3, 8004438 <_vfiprintf_r+0x18>
 8004434:	f7ff fcd8 	bl	8003de8 <__sinit>
 8004438:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800443a:	07d9      	lsls	r1, r3, #31
 800443c:	d405      	bmi.n	800444a <_vfiprintf_r+0x2a>
 800443e:	89ab      	ldrh	r3, [r5, #12]
 8004440:	059a      	lsls	r2, r3, #22
 8004442:	d402      	bmi.n	800444a <_vfiprintf_r+0x2a>
 8004444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004446:	f7ff fec6 	bl	80041d6 <__retarget_lock_acquire_recursive>
 800444a:	89ab      	ldrh	r3, [r5, #12]
 800444c:	071b      	lsls	r3, r3, #28
 800444e:	d501      	bpl.n	8004454 <_vfiprintf_r+0x34>
 8004450:	692b      	ldr	r3, [r5, #16]
 8004452:	b99b      	cbnz	r3, 800447c <_vfiprintf_r+0x5c>
 8004454:	4629      	mov	r1, r5
 8004456:	4630      	mov	r0, r6
 8004458:	f7ff fdee 	bl	8004038 <__swsetup_r>
 800445c:	b170      	cbz	r0, 800447c <_vfiprintf_r+0x5c>
 800445e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004460:	07dc      	lsls	r4, r3, #31
 8004462:	d504      	bpl.n	800446e <_vfiprintf_r+0x4e>
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	b01d      	add	sp, #116	@ 0x74
 800446a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446e:	89ab      	ldrh	r3, [r5, #12]
 8004470:	0598      	lsls	r0, r3, #22
 8004472:	d4f7      	bmi.n	8004464 <_vfiprintf_r+0x44>
 8004474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004476:	f7ff feaf 	bl	80041d8 <__retarget_lock_release_recursive>
 800447a:	e7f3      	b.n	8004464 <_vfiprintf_r+0x44>
 800447c:	2300      	movs	r3, #0
 800447e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004480:	2320      	movs	r3, #32
 8004482:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004486:	f8cd 800c 	str.w	r8, [sp, #12]
 800448a:	2330      	movs	r3, #48	@ 0x30
 800448c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800463c <_vfiprintf_r+0x21c>
 8004490:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004494:	f04f 0901 	mov.w	r9, #1
 8004498:	4623      	mov	r3, r4
 800449a:	469a      	mov	sl, r3
 800449c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044a0:	b10a      	cbz	r2, 80044a6 <_vfiprintf_r+0x86>
 80044a2:	2a25      	cmp	r2, #37	@ 0x25
 80044a4:	d1f9      	bne.n	800449a <_vfiprintf_r+0x7a>
 80044a6:	ebba 0b04 	subs.w	fp, sl, r4
 80044aa:	d00b      	beq.n	80044c4 <_vfiprintf_r+0xa4>
 80044ac:	465b      	mov	r3, fp
 80044ae:	4622      	mov	r2, r4
 80044b0:	4629      	mov	r1, r5
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7ff ffa1 	bl	80043fa <__sfputs_r>
 80044b8:	3001      	adds	r0, #1
 80044ba:	f000 80a7 	beq.w	800460c <_vfiprintf_r+0x1ec>
 80044be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044c0:	445a      	add	r2, fp
 80044c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80044c4:	f89a 3000 	ldrb.w	r3, [sl]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 809f 	beq.w	800460c <_vfiprintf_r+0x1ec>
 80044ce:	2300      	movs	r3, #0
 80044d0:	f04f 32ff 	mov.w	r2, #4294967295
 80044d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044d8:	f10a 0a01 	add.w	sl, sl, #1
 80044dc:	9304      	str	r3, [sp, #16]
 80044de:	9307      	str	r3, [sp, #28]
 80044e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80044e6:	4654      	mov	r4, sl
 80044e8:	2205      	movs	r2, #5
 80044ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ee:	4853      	ldr	r0, [pc, #332]	@ (800463c <_vfiprintf_r+0x21c>)
 80044f0:	f7fb fe7e 	bl	80001f0 <memchr>
 80044f4:	9a04      	ldr	r2, [sp, #16]
 80044f6:	b9d8      	cbnz	r0, 8004530 <_vfiprintf_r+0x110>
 80044f8:	06d1      	lsls	r1, r2, #27
 80044fa:	bf44      	itt	mi
 80044fc:	2320      	movmi	r3, #32
 80044fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004502:	0713      	lsls	r3, r2, #28
 8004504:	bf44      	itt	mi
 8004506:	232b      	movmi	r3, #43	@ 0x2b
 8004508:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800450c:	f89a 3000 	ldrb.w	r3, [sl]
 8004510:	2b2a      	cmp	r3, #42	@ 0x2a
 8004512:	d015      	beq.n	8004540 <_vfiprintf_r+0x120>
 8004514:	9a07      	ldr	r2, [sp, #28]
 8004516:	4654      	mov	r4, sl
 8004518:	2000      	movs	r0, #0
 800451a:	f04f 0c0a 	mov.w	ip, #10
 800451e:	4621      	mov	r1, r4
 8004520:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004524:	3b30      	subs	r3, #48	@ 0x30
 8004526:	2b09      	cmp	r3, #9
 8004528:	d94b      	bls.n	80045c2 <_vfiprintf_r+0x1a2>
 800452a:	b1b0      	cbz	r0, 800455a <_vfiprintf_r+0x13a>
 800452c:	9207      	str	r2, [sp, #28]
 800452e:	e014      	b.n	800455a <_vfiprintf_r+0x13a>
 8004530:	eba0 0308 	sub.w	r3, r0, r8
 8004534:	fa09 f303 	lsl.w	r3, r9, r3
 8004538:	4313      	orrs	r3, r2
 800453a:	9304      	str	r3, [sp, #16]
 800453c:	46a2      	mov	sl, r4
 800453e:	e7d2      	b.n	80044e6 <_vfiprintf_r+0xc6>
 8004540:	9b03      	ldr	r3, [sp, #12]
 8004542:	1d19      	adds	r1, r3, #4
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	9103      	str	r1, [sp, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	bfbb      	ittet	lt
 800454c:	425b      	neglt	r3, r3
 800454e:	f042 0202 	orrlt.w	r2, r2, #2
 8004552:	9307      	strge	r3, [sp, #28]
 8004554:	9307      	strlt	r3, [sp, #28]
 8004556:	bfb8      	it	lt
 8004558:	9204      	strlt	r2, [sp, #16]
 800455a:	7823      	ldrb	r3, [r4, #0]
 800455c:	2b2e      	cmp	r3, #46	@ 0x2e
 800455e:	d10a      	bne.n	8004576 <_vfiprintf_r+0x156>
 8004560:	7863      	ldrb	r3, [r4, #1]
 8004562:	2b2a      	cmp	r3, #42	@ 0x2a
 8004564:	d132      	bne.n	80045cc <_vfiprintf_r+0x1ac>
 8004566:	9b03      	ldr	r3, [sp, #12]
 8004568:	1d1a      	adds	r2, r3, #4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	9203      	str	r2, [sp, #12]
 800456e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004572:	3402      	adds	r4, #2
 8004574:	9305      	str	r3, [sp, #20]
 8004576:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800464c <_vfiprintf_r+0x22c>
 800457a:	7821      	ldrb	r1, [r4, #0]
 800457c:	2203      	movs	r2, #3
 800457e:	4650      	mov	r0, sl
 8004580:	f7fb fe36 	bl	80001f0 <memchr>
 8004584:	b138      	cbz	r0, 8004596 <_vfiprintf_r+0x176>
 8004586:	9b04      	ldr	r3, [sp, #16]
 8004588:	eba0 000a 	sub.w	r0, r0, sl
 800458c:	2240      	movs	r2, #64	@ 0x40
 800458e:	4082      	lsls	r2, r0
 8004590:	4313      	orrs	r3, r2
 8004592:	3401      	adds	r4, #1
 8004594:	9304      	str	r3, [sp, #16]
 8004596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800459a:	4829      	ldr	r0, [pc, #164]	@ (8004640 <_vfiprintf_r+0x220>)
 800459c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045a0:	2206      	movs	r2, #6
 80045a2:	f7fb fe25 	bl	80001f0 <memchr>
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d03f      	beq.n	800462a <_vfiprintf_r+0x20a>
 80045aa:	4b26      	ldr	r3, [pc, #152]	@ (8004644 <_vfiprintf_r+0x224>)
 80045ac:	bb1b      	cbnz	r3, 80045f6 <_vfiprintf_r+0x1d6>
 80045ae:	9b03      	ldr	r3, [sp, #12]
 80045b0:	3307      	adds	r3, #7
 80045b2:	f023 0307 	bic.w	r3, r3, #7
 80045b6:	3308      	adds	r3, #8
 80045b8:	9303      	str	r3, [sp, #12]
 80045ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045bc:	443b      	add	r3, r7
 80045be:	9309      	str	r3, [sp, #36]	@ 0x24
 80045c0:	e76a      	b.n	8004498 <_vfiprintf_r+0x78>
 80045c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80045c6:	460c      	mov	r4, r1
 80045c8:	2001      	movs	r0, #1
 80045ca:	e7a8      	b.n	800451e <_vfiprintf_r+0xfe>
 80045cc:	2300      	movs	r3, #0
 80045ce:	3401      	adds	r4, #1
 80045d0:	9305      	str	r3, [sp, #20]
 80045d2:	4619      	mov	r1, r3
 80045d4:	f04f 0c0a 	mov.w	ip, #10
 80045d8:	4620      	mov	r0, r4
 80045da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045de:	3a30      	subs	r2, #48	@ 0x30
 80045e0:	2a09      	cmp	r2, #9
 80045e2:	d903      	bls.n	80045ec <_vfiprintf_r+0x1cc>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0c6      	beq.n	8004576 <_vfiprintf_r+0x156>
 80045e8:	9105      	str	r1, [sp, #20]
 80045ea:	e7c4      	b.n	8004576 <_vfiprintf_r+0x156>
 80045ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80045f0:	4604      	mov	r4, r0
 80045f2:	2301      	movs	r3, #1
 80045f4:	e7f0      	b.n	80045d8 <_vfiprintf_r+0x1b8>
 80045f6:	ab03      	add	r3, sp, #12
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	462a      	mov	r2, r5
 80045fc:	4b12      	ldr	r3, [pc, #72]	@ (8004648 <_vfiprintf_r+0x228>)
 80045fe:	a904      	add	r1, sp, #16
 8004600:	4630      	mov	r0, r6
 8004602:	f3af 8000 	nop.w
 8004606:	4607      	mov	r7, r0
 8004608:	1c78      	adds	r0, r7, #1
 800460a:	d1d6      	bne.n	80045ba <_vfiprintf_r+0x19a>
 800460c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800460e:	07d9      	lsls	r1, r3, #31
 8004610:	d405      	bmi.n	800461e <_vfiprintf_r+0x1fe>
 8004612:	89ab      	ldrh	r3, [r5, #12]
 8004614:	059a      	lsls	r2, r3, #22
 8004616:	d402      	bmi.n	800461e <_vfiprintf_r+0x1fe>
 8004618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800461a:	f7ff fddd 	bl	80041d8 <__retarget_lock_release_recursive>
 800461e:	89ab      	ldrh	r3, [r5, #12]
 8004620:	065b      	lsls	r3, r3, #25
 8004622:	f53f af1f 	bmi.w	8004464 <_vfiprintf_r+0x44>
 8004626:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004628:	e71e      	b.n	8004468 <_vfiprintf_r+0x48>
 800462a:	ab03      	add	r3, sp, #12
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	462a      	mov	r2, r5
 8004630:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <_vfiprintf_r+0x228>)
 8004632:	a904      	add	r1, sp, #16
 8004634:	4630      	mov	r0, r6
 8004636:	f000 f879 	bl	800472c <_printf_i>
 800463a:	e7e4      	b.n	8004606 <_vfiprintf_r+0x1e6>
 800463c:	08004cc4 	.word	0x08004cc4
 8004640:	08004cce 	.word	0x08004cce
 8004644:	00000000 	.word	0x00000000
 8004648:	080043fb 	.word	0x080043fb
 800464c:	08004cca 	.word	0x08004cca

08004650 <_printf_common>:
 8004650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004654:	4616      	mov	r6, r2
 8004656:	4698      	mov	r8, r3
 8004658:	688a      	ldr	r2, [r1, #8]
 800465a:	690b      	ldr	r3, [r1, #16]
 800465c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004660:	4293      	cmp	r3, r2
 8004662:	bfb8      	it	lt
 8004664:	4613      	movlt	r3, r2
 8004666:	6033      	str	r3, [r6, #0]
 8004668:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800466c:	4607      	mov	r7, r0
 800466e:	460c      	mov	r4, r1
 8004670:	b10a      	cbz	r2, 8004676 <_printf_common+0x26>
 8004672:	3301      	adds	r3, #1
 8004674:	6033      	str	r3, [r6, #0]
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	0699      	lsls	r1, r3, #26
 800467a:	bf42      	ittt	mi
 800467c:	6833      	ldrmi	r3, [r6, #0]
 800467e:	3302      	addmi	r3, #2
 8004680:	6033      	strmi	r3, [r6, #0]
 8004682:	6825      	ldr	r5, [r4, #0]
 8004684:	f015 0506 	ands.w	r5, r5, #6
 8004688:	d106      	bne.n	8004698 <_printf_common+0x48>
 800468a:	f104 0a19 	add.w	sl, r4, #25
 800468e:	68e3      	ldr	r3, [r4, #12]
 8004690:	6832      	ldr	r2, [r6, #0]
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	42ab      	cmp	r3, r5
 8004696:	dc26      	bgt.n	80046e6 <_printf_common+0x96>
 8004698:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800469c:	6822      	ldr	r2, [r4, #0]
 800469e:	3b00      	subs	r3, #0
 80046a0:	bf18      	it	ne
 80046a2:	2301      	movne	r3, #1
 80046a4:	0692      	lsls	r2, r2, #26
 80046a6:	d42b      	bmi.n	8004700 <_printf_common+0xb0>
 80046a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046ac:	4641      	mov	r1, r8
 80046ae:	4638      	mov	r0, r7
 80046b0:	47c8      	blx	r9
 80046b2:	3001      	adds	r0, #1
 80046b4:	d01e      	beq.n	80046f4 <_printf_common+0xa4>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	6922      	ldr	r2, [r4, #16]
 80046ba:	f003 0306 	and.w	r3, r3, #6
 80046be:	2b04      	cmp	r3, #4
 80046c0:	bf02      	ittt	eq
 80046c2:	68e5      	ldreq	r5, [r4, #12]
 80046c4:	6833      	ldreq	r3, [r6, #0]
 80046c6:	1aed      	subeq	r5, r5, r3
 80046c8:	68a3      	ldr	r3, [r4, #8]
 80046ca:	bf0c      	ite	eq
 80046cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046d0:	2500      	movne	r5, #0
 80046d2:	4293      	cmp	r3, r2
 80046d4:	bfc4      	itt	gt
 80046d6:	1a9b      	subgt	r3, r3, r2
 80046d8:	18ed      	addgt	r5, r5, r3
 80046da:	2600      	movs	r6, #0
 80046dc:	341a      	adds	r4, #26
 80046de:	42b5      	cmp	r5, r6
 80046e0:	d11a      	bne.n	8004718 <_printf_common+0xc8>
 80046e2:	2000      	movs	r0, #0
 80046e4:	e008      	b.n	80046f8 <_printf_common+0xa8>
 80046e6:	2301      	movs	r3, #1
 80046e8:	4652      	mov	r2, sl
 80046ea:	4641      	mov	r1, r8
 80046ec:	4638      	mov	r0, r7
 80046ee:	47c8      	blx	r9
 80046f0:	3001      	adds	r0, #1
 80046f2:	d103      	bne.n	80046fc <_printf_common+0xac>
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046fc:	3501      	adds	r5, #1
 80046fe:	e7c6      	b.n	800468e <_printf_common+0x3e>
 8004700:	18e1      	adds	r1, r4, r3
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	2030      	movs	r0, #48	@ 0x30
 8004706:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800470a:	4422      	add	r2, r4
 800470c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004710:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004714:	3302      	adds	r3, #2
 8004716:	e7c7      	b.n	80046a8 <_printf_common+0x58>
 8004718:	2301      	movs	r3, #1
 800471a:	4622      	mov	r2, r4
 800471c:	4641      	mov	r1, r8
 800471e:	4638      	mov	r0, r7
 8004720:	47c8      	blx	r9
 8004722:	3001      	adds	r0, #1
 8004724:	d0e6      	beq.n	80046f4 <_printf_common+0xa4>
 8004726:	3601      	adds	r6, #1
 8004728:	e7d9      	b.n	80046de <_printf_common+0x8e>
	...

0800472c <_printf_i>:
 800472c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004730:	7e0f      	ldrb	r7, [r1, #24]
 8004732:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004734:	2f78      	cmp	r7, #120	@ 0x78
 8004736:	4691      	mov	r9, r2
 8004738:	4680      	mov	r8, r0
 800473a:	460c      	mov	r4, r1
 800473c:	469a      	mov	sl, r3
 800473e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004742:	d807      	bhi.n	8004754 <_printf_i+0x28>
 8004744:	2f62      	cmp	r7, #98	@ 0x62
 8004746:	d80a      	bhi.n	800475e <_printf_i+0x32>
 8004748:	2f00      	cmp	r7, #0
 800474a:	f000 80d1 	beq.w	80048f0 <_printf_i+0x1c4>
 800474e:	2f58      	cmp	r7, #88	@ 0x58
 8004750:	f000 80b8 	beq.w	80048c4 <_printf_i+0x198>
 8004754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004758:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800475c:	e03a      	b.n	80047d4 <_printf_i+0xa8>
 800475e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004762:	2b15      	cmp	r3, #21
 8004764:	d8f6      	bhi.n	8004754 <_printf_i+0x28>
 8004766:	a101      	add	r1, pc, #4	@ (adr r1, 800476c <_printf_i+0x40>)
 8004768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800476c:	080047c5 	.word	0x080047c5
 8004770:	080047d9 	.word	0x080047d9
 8004774:	08004755 	.word	0x08004755
 8004778:	08004755 	.word	0x08004755
 800477c:	08004755 	.word	0x08004755
 8004780:	08004755 	.word	0x08004755
 8004784:	080047d9 	.word	0x080047d9
 8004788:	08004755 	.word	0x08004755
 800478c:	08004755 	.word	0x08004755
 8004790:	08004755 	.word	0x08004755
 8004794:	08004755 	.word	0x08004755
 8004798:	080048d7 	.word	0x080048d7
 800479c:	08004803 	.word	0x08004803
 80047a0:	08004891 	.word	0x08004891
 80047a4:	08004755 	.word	0x08004755
 80047a8:	08004755 	.word	0x08004755
 80047ac:	080048f9 	.word	0x080048f9
 80047b0:	08004755 	.word	0x08004755
 80047b4:	08004803 	.word	0x08004803
 80047b8:	08004755 	.word	0x08004755
 80047bc:	08004755 	.word	0x08004755
 80047c0:	08004899 	.word	0x08004899
 80047c4:	6833      	ldr	r3, [r6, #0]
 80047c6:	1d1a      	adds	r2, r3, #4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6032      	str	r2, [r6, #0]
 80047cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047d4:	2301      	movs	r3, #1
 80047d6:	e09c      	b.n	8004912 <_printf_i+0x1e6>
 80047d8:	6833      	ldr	r3, [r6, #0]
 80047da:	6820      	ldr	r0, [r4, #0]
 80047dc:	1d19      	adds	r1, r3, #4
 80047de:	6031      	str	r1, [r6, #0]
 80047e0:	0606      	lsls	r6, r0, #24
 80047e2:	d501      	bpl.n	80047e8 <_printf_i+0xbc>
 80047e4:	681d      	ldr	r5, [r3, #0]
 80047e6:	e003      	b.n	80047f0 <_printf_i+0xc4>
 80047e8:	0645      	lsls	r5, r0, #25
 80047ea:	d5fb      	bpl.n	80047e4 <_printf_i+0xb8>
 80047ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047f0:	2d00      	cmp	r5, #0
 80047f2:	da03      	bge.n	80047fc <_printf_i+0xd0>
 80047f4:	232d      	movs	r3, #45	@ 0x2d
 80047f6:	426d      	negs	r5, r5
 80047f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047fc:	4858      	ldr	r0, [pc, #352]	@ (8004960 <_printf_i+0x234>)
 80047fe:	230a      	movs	r3, #10
 8004800:	e011      	b.n	8004826 <_printf_i+0xfa>
 8004802:	6821      	ldr	r1, [r4, #0]
 8004804:	6833      	ldr	r3, [r6, #0]
 8004806:	0608      	lsls	r0, r1, #24
 8004808:	f853 5b04 	ldr.w	r5, [r3], #4
 800480c:	d402      	bmi.n	8004814 <_printf_i+0xe8>
 800480e:	0649      	lsls	r1, r1, #25
 8004810:	bf48      	it	mi
 8004812:	b2ad      	uxthmi	r5, r5
 8004814:	2f6f      	cmp	r7, #111	@ 0x6f
 8004816:	4852      	ldr	r0, [pc, #328]	@ (8004960 <_printf_i+0x234>)
 8004818:	6033      	str	r3, [r6, #0]
 800481a:	bf14      	ite	ne
 800481c:	230a      	movne	r3, #10
 800481e:	2308      	moveq	r3, #8
 8004820:	2100      	movs	r1, #0
 8004822:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004826:	6866      	ldr	r6, [r4, #4]
 8004828:	60a6      	str	r6, [r4, #8]
 800482a:	2e00      	cmp	r6, #0
 800482c:	db05      	blt.n	800483a <_printf_i+0x10e>
 800482e:	6821      	ldr	r1, [r4, #0]
 8004830:	432e      	orrs	r6, r5
 8004832:	f021 0104 	bic.w	r1, r1, #4
 8004836:	6021      	str	r1, [r4, #0]
 8004838:	d04b      	beq.n	80048d2 <_printf_i+0x1a6>
 800483a:	4616      	mov	r6, r2
 800483c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004840:	fb03 5711 	mls	r7, r3, r1, r5
 8004844:	5dc7      	ldrb	r7, [r0, r7]
 8004846:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800484a:	462f      	mov	r7, r5
 800484c:	42bb      	cmp	r3, r7
 800484e:	460d      	mov	r5, r1
 8004850:	d9f4      	bls.n	800483c <_printf_i+0x110>
 8004852:	2b08      	cmp	r3, #8
 8004854:	d10b      	bne.n	800486e <_printf_i+0x142>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	07df      	lsls	r7, r3, #31
 800485a:	d508      	bpl.n	800486e <_printf_i+0x142>
 800485c:	6923      	ldr	r3, [r4, #16]
 800485e:	6861      	ldr	r1, [r4, #4]
 8004860:	4299      	cmp	r1, r3
 8004862:	bfde      	ittt	le
 8004864:	2330      	movle	r3, #48	@ 0x30
 8004866:	f806 3c01 	strble.w	r3, [r6, #-1]
 800486a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800486e:	1b92      	subs	r2, r2, r6
 8004870:	6122      	str	r2, [r4, #16]
 8004872:	f8cd a000 	str.w	sl, [sp]
 8004876:	464b      	mov	r3, r9
 8004878:	aa03      	add	r2, sp, #12
 800487a:	4621      	mov	r1, r4
 800487c:	4640      	mov	r0, r8
 800487e:	f7ff fee7 	bl	8004650 <_printf_common>
 8004882:	3001      	adds	r0, #1
 8004884:	d14a      	bne.n	800491c <_printf_i+0x1f0>
 8004886:	f04f 30ff 	mov.w	r0, #4294967295
 800488a:	b004      	add	sp, #16
 800488c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	f043 0320 	orr.w	r3, r3, #32
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	4832      	ldr	r0, [pc, #200]	@ (8004964 <_printf_i+0x238>)
 800489a:	2778      	movs	r7, #120	@ 0x78
 800489c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	6831      	ldr	r1, [r6, #0]
 80048a4:	061f      	lsls	r7, r3, #24
 80048a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80048aa:	d402      	bmi.n	80048b2 <_printf_i+0x186>
 80048ac:	065f      	lsls	r7, r3, #25
 80048ae:	bf48      	it	mi
 80048b0:	b2ad      	uxthmi	r5, r5
 80048b2:	6031      	str	r1, [r6, #0]
 80048b4:	07d9      	lsls	r1, r3, #31
 80048b6:	bf44      	itt	mi
 80048b8:	f043 0320 	orrmi.w	r3, r3, #32
 80048bc:	6023      	strmi	r3, [r4, #0]
 80048be:	b11d      	cbz	r5, 80048c8 <_printf_i+0x19c>
 80048c0:	2310      	movs	r3, #16
 80048c2:	e7ad      	b.n	8004820 <_printf_i+0xf4>
 80048c4:	4826      	ldr	r0, [pc, #152]	@ (8004960 <_printf_i+0x234>)
 80048c6:	e7e9      	b.n	800489c <_printf_i+0x170>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	f023 0320 	bic.w	r3, r3, #32
 80048ce:	6023      	str	r3, [r4, #0]
 80048d0:	e7f6      	b.n	80048c0 <_printf_i+0x194>
 80048d2:	4616      	mov	r6, r2
 80048d4:	e7bd      	b.n	8004852 <_printf_i+0x126>
 80048d6:	6833      	ldr	r3, [r6, #0]
 80048d8:	6825      	ldr	r5, [r4, #0]
 80048da:	6961      	ldr	r1, [r4, #20]
 80048dc:	1d18      	adds	r0, r3, #4
 80048de:	6030      	str	r0, [r6, #0]
 80048e0:	062e      	lsls	r6, r5, #24
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	d501      	bpl.n	80048ea <_printf_i+0x1be>
 80048e6:	6019      	str	r1, [r3, #0]
 80048e8:	e002      	b.n	80048f0 <_printf_i+0x1c4>
 80048ea:	0668      	lsls	r0, r5, #25
 80048ec:	d5fb      	bpl.n	80048e6 <_printf_i+0x1ba>
 80048ee:	8019      	strh	r1, [r3, #0]
 80048f0:	2300      	movs	r3, #0
 80048f2:	6123      	str	r3, [r4, #16]
 80048f4:	4616      	mov	r6, r2
 80048f6:	e7bc      	b.n	8004872 <_printf_i+0x146>
 80048f8:	6833      	ldr	r3, [r6, #0]
 80048fa:	1d1a      	adds	r2, r3, #4
 80048fc:	6032      	str	r2, [r6, #0]
 80048fe:	681e      	ldr	r6, [r3, #0]
 8004900:	6862      	ldr	r2, [r4, #4]
 8004902:	2100      	movs	r1, #0
 8004904:	4630      	mov	r0, r6
 8004906:	f7fb fc73 	bl	80001f0 <memchr>
 800490a:	b108      	cbz	r0, 8004910 <_printf_i+0x1e4>
 800490c:	1b80      	subs	r0, r0, r6
 800490e:	6060      	str	r0, [r4, #4]
 8004910:	6863      	ldr	r3, [r4, #4]
 8004912:	6123      	str	r3, [r4, #16]
 8004914:	2300      	movs	r3, #0
 8004916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800491a:	e7aa      	b.n	8004872 <_printf_i+0x146>
 800491c:	6923      	ldr	r3, [r4, #16]
 800491e:	4632      	mov	r2, r6
 8004920:	4649      	mov	r1, r9
 8004922:	4640      	mov	r0, r8
 8004924:	47d0      	blx	sl
 8004926:	3001      	adds	r0, #1
 8004928:	d0ad      	beq.n	8004886 <_printf_i+0x15a>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	079b      	lsls	r3, r3, #30
 800492e:	d413      	bmi.n	8004958 <_printf_i+0x22c>
 8004930:	68e0      	ldr	r0, [r4, #12]
 8004932:	9b03      	ldr	r3, [sp, #12]
 8004934:	4298      	cmp	r0, r3
 8004936:	bfb8      	it	lt
 8004938:	4618      	movlt	r0, r3
 800493a:	e7a6      	b.n	800488a <_printf_i+0x15e>
 800493c:	2301      	movs	r3, #1
 800493e:	4632      	mov	r2, r6
 8004940:	4649      	mov	r1, r9
 8004942:	4640      	mov	r0, r8
 8004944:	47d0      	blx	sl
 8004946:	3001      	adds	r0, #1
 8004948:	d09d      	beq.n	8004886 <_printf_i+0x15a>
 800494a:	3501      	adds	r5, #1
 800494c:	68e3      	ldr	r3, [r4, #12]
 800494e:	9903      	ldr	r1, [sp, #12]
 8004950:	1a5b      	subs	r3, r3, r1
 8004952:	42ab      	cmp	r3, r5
 8004954:	dcf2      	bgt.n	800493c <_printf_i+0x210>
 8004956:	e7eb      	b.n	8004930 <_printf_i+0x204>
 8004958:	2500      	movs	r5, #0
 800495a:	f104 0619 	add.w	r6, r4, #25
 800495e:	e7f5      	b.n	800494c <_printf_i+0x220>
 8004960:	08004cd5 	.word	0x08004cd5
 8004964:	08004ce6 	.word	0x08004ce6

08004968 <__sflush_r>:
 8004968:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800496c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004970:	0716      	lsls	r6, r2, #28
 8004972:	4605      	mov	r5, r0
 8004974:	460c      	mov	r4, r1
 8004976:	d454      	bmi.n	8004a22 <__sflush_r+0xba>
 8004978:	684b      	ldr	r3, [r1, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	dc02      	bgt.n	8004984 <__sflush_r+0x1c>
 800497e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	dd48      	ble.n	8004a16 <__sflush_r+0xae>
 8004984:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004986:	2e00      	cmp	r6, #0
 8004988:	d045      	beq.n	8004a16 <__sflush_r+0xae>
 800498a:	2300      	movs	r3, #0
 800498c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004990:	682f      	ldr	r7, [r5, #0]
 8004992:	6a21      	ldr	r1, [r4, #32]
 8004994:	602b      	str	r3, [r5, #0]
 8004996:	d030      	beq.n	80049fa <__sflush_r+0x92>
 8004998:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800499a:	89a3      	ldrh	r3, [r4, #12]
 800499c:	0759      	lsls	r1, r3, #29
 800499e:	d505      	bpl.n	80049ac <__sflush_r+0x44>
 80049a0:	6863      	ldr	r3, [r4, #4]
 80049a2:	1ad2      	subs	r2, r2, r3
 80049a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80049a6:	b10b      	cbz	r3, 80049ac <__sflush_r+0x44>
 80049a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049aa:	1ad2      	subs	r2, r2, r3
 80049ac:	2300      	movs	r3, #0
 80049ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049b0:	6a21      	ldr	r1, [r4, #32]
 80049b2:	4628      	mov	r0, r5
 80049b4:	47b0      	blx	r6
 80049b6:	1c43      	adds	r3, r0, #1
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	d106      	bne.n	80049ca <__sflush_r+0x62>
 80049bc:	6829      	ldr	r1, [r5, #0]
 80049be:	291d      	cmp	r1, #29
 80049c0:	d82b      	bhi.n	8004a1a <__sflush_r+0xb2>
 80049c2:	4a2a      	ldr	r2, [pc, #168]	@ (8004a6c <__sflush_r+0x104>)
 80049c4:	40ca      	lsrs	r2, r1
 80049c6:	07d6      	lsls	r6, r2, #31
 80049c8:	d527      	bpl.n	8004a1a <__sflush_r+0xb2>
 80049ca:	2200      	movs	r2, #0
 80049cc:	6062      	str	r2, [r4, #4]
 80049ce:	04d9      	lsls	r1, r3, #19
 80049d0:	6922      	ldr	r2, [r4, #16]
 80049d2:	6022      	str	r2, [r4, #0]
 80049d4:	d504      	bpl.n	80049e0 <__sflush_r+0x78>
 80049d6:	1c42      	adds	r2, r0, #1
 80049d8:	d101      	bne.n	80049de <__sflush_r+0x76>
 80049da:	682b      	ldr	r3, [r5, #0]
 80049dc:	b903      	cbnz	r3, 80049e0 <__sflush_r+0x78>
 80049de:	6560      	str	r0, [r4, #84]	@ 0x54
 80049e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049e2:	602f      	str	r7, [r5, #0]
 80049e4:	b1b9      	cbz	r1, 8004a16 <__sflush_r+0xae>
 80049e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049ea:	4299      	cmp	r1, r3
 80049ec:	d002      	beq.n	80049f4 <__sflush_r+0x8c>
 80049ee:	4628      	mov	r0, r5
 80049f0:	f7ff fbf4 	bl	80041dc <_free_r>
 80049f4:	2300      	movs	r3, #0
 80049f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80049f8:	e00d      	b.n	8004a16 <__sflush_r+0xae>
 80049fa:	2301      	movs	r3, #1
 80049fc:	4628      	mov	r0, r5
 80049fe:	47b0      	blx	r6
 8004a00:	4602      	mov	r2, r0
 8004a02:	1c50      	adds	r0, r2, #1
 8004a04:	d1c9      	bne.n	800499a <__sflush_r+0x32>
 8004a06:	682b      	ldr	r3, [r5, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0c6      	beq.n	800499a <__sflush_r+0x32>
 8004a0c:	2b1d      	cmp	r3, #29
 8004a0e:	d001      	beq.n	8004a14 <__sflush_r+0xac>
 8004a10:	2b16      	cmp	r3, #22
 8004a12:	d11e      	bne.n	8004a52 <__sflush_r+0xea>
 8004a14:	602f      	str	r7, [r5, #0]
 8004a16:	2000      	movs	r0, #0
 8004a18:	e022      	b.n	8004a60 <__sflush_r+0xf8>
 8004a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a1e:	b21b      	sxth	r3, r3
 8004a20:	e01b      	b.n	8004a5a <__sflush_r+0xf2>
 8004a22:	690f      	ldr	r7, [r1, #16]
 8004a24:	2f00      	cmp	r7, #0
 8004a26:	d0f6      	beq.n	8004a16 <__sflush_r+0xae>
 8004a28:	0793      	lsls	r3, r2, #30
 8004a2a:	680e      	ldr	r6, [r1, #0]
 8004a2c:	bf08      	it	eq
 8004a2e:	694b      	ldreq	r3, [r1, #20]
 8004a30:	600f      	str	r7, [r1, #0]
 8004a32:	bf18      	it	ne
 8004a34:	2300      	movne	r3, #0
 8004a36:	eba6 0807 	sub.w	r8, r6, r7
 8004a3a:	608b      	str	r3, [r1, #8]
 8004a3c:	f1b8 0f00 	cmp.w	r8, #0
 8004a40:	dde9      	ble.n	8004a16 <__sflush_r+0xae>
 8004a42:	6a21      	ldr	r1, [r4, #32]
 8004a44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a46:	4643      	mov	r3, r8
 8004a48:	463a      	mov	r2, r7
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	47b0      	blx	r6
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	dc08      	bgt.n	8004a64 <__sflush_r+0xfc>
 8004a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a5a:	81a3      	strh	r3, [r4, #12]
 8004a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a64:	4407      	add	r7, r0
 8004a66:	eba8 0800 	sub.w	r8, r8, r0
 8004a6a:	e7e7      	b.n	8004a3c <__sflush_r+0xd4>
 8004a6c:	20400001 	.word	0x20400001

08004a70 <_fflush_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	690b      	ldr	r3, [r1, #16]
 8004a74:	4605      	mov	r5, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	b913      	cbnz	r3, 8004a80 <_fflush_r+0x10>
 8004a7a:	2500      	movs	r5, #0
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	bd38      	pop	{r3, r4, r5, pc}
 8004a80:	b118      	cbz	r0, 8004a8a <_fflush_r+0x1a>
 8004a82:	6a03      	ldr	r3, [r0, #32]
 8004a84:	b90b      	cbnz	r3, 8004a8a <_fflush_r+0x1a>
 8004a86:	f7ff f9af 	bl	8003de8 <__sinit>
 8004a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f3      	beq.n	8004a7a <_fflush_r+0xa>
 8004a92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a94:	07d0      	lsls	r0, r2, #31
 8004a96:	d404      	bmi.n	8004aa2 <_fflush_r+0x32>
 8004a98:	0599      	lsls	r1, r3, #22
 8004a9a:	d402      	bmi.n	8004aa2 <_fflush_r+0x32>
 8004a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a9e:	f7ff fb9a 	bl	80041d6 <__retarget_lock_acquire_recursive>
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	f7ff ff5f 	bl	8004968 <__sflush_r>
 8004aaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004aac:	07da      	lsls	r2, r3, #31
 8004aae:	4605      	mov	r5, r0
 8004ab0:	d4e4      	bmi.n	8004a7c <_fflush_r+0xc>
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	059b      	lsls	r3, r3, #22
 8004ab6:	d4e1      	bmi.n	8004a7c <_fflush_r+0xc>
 8004ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aba:	f7ff fb8d 	bl	80041d8 <__retarget_lock_release_recursive>
 8004abe:	e7dd      	b.n	8004a7c <_fflush_r+0xc>

08004ac0 <__swhatbuf_r>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac8:	2900      	cmp	r1, #0
 8004aca:	b096      	sub	sp, #88	@ 0x58
 8004acc:	4615      	mov	r5, r2
 8004ace:	461e      	mov	r6, r3
 8004ad0:	da0d      	bge.n	8004aee <__swhatbuf_r+0x2e>
 8004ad2:	89a3      	ldrh	r3, [r4, #12]
 8004ad4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ad8:	f04f 0100 	mov.w	r1, #0
 8004adc:	bf14      	ite	ne
 8004ade:	2340      	movne	r3, #64	@ 0x40
 8004ae0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	6031      	str	r1, [r6, #0]
 8004ae8:	602b      	str	r3, [r5, #0]
 8004aea:	b016      	add	sp, #88	@ 0x58
 8004aec:	bd70      	pop	{r4, r5, r6, pc}
 8004aee:	466a      	mov	r2, sp
 8004af0:	f000 f848 	bl	8004b84 <_fstat_r>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	dbec      	blt.n	8004ad2 <__swhatbuf_r+0x12>
 8004af8:	9901      	ldr	r1, [sp, #4]
 8004afa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004afe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b02:	4259      	negs	r1, r3
 8004b04:	4159      	adcs	r1, r3
 8004b06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b0a:	e7eb      	b.n	8004ae4 <__swhatbuf_r+0x24>

08004b0c <__smakebuf_r>:
 8004b0c:	898b      	ldrh	r3, [r1, #12]
 8004b0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b10:	079d      	lsls	r5, r3, #30
 8004b12:	4606      	mov	r6, r0
 8004b14:	460c      	mov	r4, r1
 8004b16:	d507      	bpl.n	8004b28 <__smakebuf_r+0x1c>
 8004b18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	6123      	str	r3, [r4, #16]
 8004b20:	2301      	movs	r3, #1
 8004b22:	6163      	str	r3, [r4, #20]
 8004b24:	b003      	add	sp, #12
 8004b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b28:	ab01      	add	r3, sp, #4
 8004b2a:	466a      	mov	r2, sp
 8004b2c:	f7ff ffc8 	bl	8004ac0 <__swhatbuf_r>
 8004b30:	9f00      	ldr	r7, [sp, #0]
 8004b32:	4605      	mov	r5, r0
 8004b34:	4639      	mov	r1, r7
 8004b36:	4630      	mov	r0, r6
 8004b38:	f7ff fbbc 	bl	80042b4 <_malloc_r>
 8004b3c:	b948      	cbnz	r0, 8004b52 <__smakebuf_r+0x46>
 8004b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b42:	059a      	lsls	r2, r3, #22
 8004b44:	d4ee      	bmi.n	8004b24 <__smakebuf_r+0x18>
 8004b46:	f023 0303 	bic.w	r3, r3, #3
 8004b4a:	f043 0302 	orr.w	r3, r3, #2
 8004b4e:	81a3      	strh	r3, [r4, #12]
 8004b50:	e7e2      	b.n	8004b18 <__smakebuf_r+0xc>
 8004b52:	89a3      	ldrh	r3, [r4, #12]
 8004b54:	6020      	str	r0, [r4, #0]
 8004b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b5a:	81a3      	strh	r3, [r4, #12]
 8004b5c:	9b01      	ldr	r3, [sp, #4]
 8004b5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b62:	b15b      	cbz	r3, 8004b7c <__smakebuf_r+0x70>
 8004b64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f000 f81d 	bl	8004ba8 <_isatty_r>
 8004b6e:	b128      	cbz	r0, 8004b7c <__smakebuf_r+0x70>
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	f023 0303 	bic.w	r3, r3, #3
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	81a3      	strh	r3, [r4, #12]
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	431d      	orrs	r5, r3
 8004b80:	81a5      	strh	r5, [r4, #12]
 8004b82:	e7cf      	b.n	8004b24 <__smakebuf_r+0x18>

08004b84 <_fstat_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4d07      	ldr	r5, [pc, #28]	@ (8004ba4 <_fstat_r+0x20>)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	4611      	mov	r1, r2
 8004b90:	602b      	str	r3, [r5, #0]
 8004b92:	f7fb ff14 	bl	80009be <_fstat>
 8004b96:	1c43      	adds	r3, r0, #1
 8004b98:	d102      	bne.n	8004ba0 <_fstat_r+0x1c>
 8004b9a:	682b      	ldr	r3, [r5, #0]
 8004b9c:	b103      	cbz	r3, 8004ba0 <_fstat_r+0x1c>
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000294 	.word	0x20000294

08004ba8 <_isatty_r>:
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 8004baa:	4d06      	ldr	r5, [pc, #24]	@ (8004bc4 <_isatty_r+0x1c>)
 8004bac:	2300      	movs	r3, #0
 8004bae:	4604      	mov	r4, r0
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	602b      	str	r3, [r5, #0]
 8004bb4:	f7fb ff13 	bl	80009de <_isatty>
 8004bb8:	1c43      	adds	r3, r0, #1
 8004bba:	d102      	bne.n	8004bc2 <_isatty_r+0x1a>
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	b103      	cbz	r3, 8004bc2 <_isatty_r+0x1a>
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
 8004bc4:	20000294 	.word	0x20000294

08004bc8 <_sbrk_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4d06      	ldr	r5, [pc, #24]	@ (8004be4 <_sbrk_r+0x1c>)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4604      	mov	r4, r0
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	602b      	str	r3, [r5, #0]
 8004bd4:	f7fb ff1c 	bl	8000a10 <_sbrk>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d102      	bne.n	8004be2 <_sbrk_r+0x1a>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <_sbrk_r+0x1a>
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
 8004be4:	20000294 	.word	0x20000294

08004be8 <_init>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	bf00      	nop
 8004bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bee:	bc08      	pop	{r3}
 8004bf0:	469e      	mov	lr, r3
 8004bf2:	4770      	bx	lr

08004bf4 <_fini>:
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	bf00      	nop
 8004bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfa:	bc08      	pop	{r3}
 8004bfc:	469e      	mov	lr, r3
 8004bfe:	4770      	bx	lr
